
dsilv022_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000010d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001062  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000088  00800100  00800100  000010d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115f  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000991  00000000  00000000  00002397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4b  00000000  00000000  00002d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000752  00000000  00000000  00003c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076d  00000000  00000000  0000437a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004ae7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c5 c0       	rjmp	.+394    	; 0x18c <__ctors_end>
       2:	00 00       	nop
       4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
       6:	00 00       	nop
       8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
       a:	00 00       	nop
       c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
       e:	00 00       	nop
      10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
      12:	00 00       	nop
      14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
      16:	00 00       	nop
      18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
      1e:	00 00       	nop
      20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
      22:	00 00       	nop
      24:	c3 c0       	rjmp	.+390    	; 0x1ac <__bad_interrupt>
      26:	00 00       	nop
      28:	c1 c0       	rjmp	.+386    	; 0x1ac <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bf c0       	rjmp	.+382    	; 0x1ac <__bad_interrupt>
      2e:	00 00       	nop
      30:	bd c0       	rjmp	.+378    	; 0x1ac <__bad_interrupt>
      32:	00 00       	nop
      34:	bb c0       	rjmp	.+374    	; 0x1ac <__bad_interrupt>
      36:	00 00       	nop
      38:	b9 c0       	rjmp	.+370    	; 0x1ac <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b7 c0       	rjmp	.+366    	; 0x1ac <__bad_interrupt>
      3e:	00 00       	nop
      40:	b5 c0       	rjmp	.+362    	; 0x1ac <__bad_interrupt>
      42:	00 00       	nop
      44:	b3 c0       	rjmp	.+358    	; 0x1ac <__bad_interrupt>
      46:	00 00       	nop
      48:	b1 c0       	rjmp	.+354    	; 0x1ac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	af c0       	rjmp	.+350    	; 0x1ac <__bad_interrupt>
      4e:	00 00       	nop
      50:	ad c0       	rjmp	.+346    	; 0x1ac <__bad_interrupt>
      52:	00 00       	nop
      54:	ab c0       	rjmp	.+342    	; 0x1ac <__bad_interrupt>
      56:	00 00       	nop
      58:	a9 c0       	rjmp	.+338    	; 0x1ac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a7 c0       	rjmp	.+334    	; 0x1ac <__bad_interrupt>
      5e:	00 00       	nop
      60:	a5 c0       	rjmp	.+330    	; 0x1ac <__bad_interrupt>
      62:	00 00       	nop
      64:	a3 c0       	rjmp	.+326    	; 0x1ac <__bad_interrupt>
      66:	00 00       	nop
      68:	a1 c0       	rjmp	.+322    	; 0x1ac <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9f c0       	rjmp	.+318    	; 0x1ac <__bad_interrupt>
      6e:	00 00       	nop
      70:	9d c0       	rjmp	.+314    	; 0x1ac <__bad_interrupt>
      72:	00 00       	nop
      74:	9b c0       	rjmp	.+310    	; 0x1ac <__bad_interrupt>
      76:	00 00       	nop
      78:	99 c0       	rjmp	.+306    	; 0x1ac <__bad_interrupt>
      7a:	00 00       	nop
      7c:	97 c0       	rjmp	.+302    	; 0x1ac <__bad_interrupt>
      7e:	00 00       	nop
      80:	95 c0       	rjmp	.+298    	; 0x1ac <__bad_interrupt>
      82:	00 00       	nop
      84:	93 c0       	rjmp	.+294    	; 0x1ac <__bad_interrupt>
      86:	00 00       	nop
      88:	91 c0       	rjmp	.+290    	; 0x1ac <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 85       	ldd	r16, Z+8	; 0x08
      8e:	8f 0a       	sbc	r8, r31
      90:	9b 1e       	adc	r9, r27
      92:	14 91       	lpm	r17, Z
      94:	b3 36       	cpi	r27, 0x63	; 99
      96:	3c b9       	out	0x0c, r19	; 12
      98:	28 ad       	ldd	r18, Y+56	; 0x38
      9a:	a7 22       	and	r10, r23
      9c:	e3 66       	ori	r30, 0x63	; 99
      9e:	6c e9       	ldi	r22, 0x9C	; 156
      a0:	78 fd       	.word	0xfd78	; ????
      a2:	f7 72       	andi	r31, 0x27	; 39
      a4:	50 d5       	rcall	.+2720   	; 0xb46 <main+0x1a0>
      a6:	df 5a       	subi	r29, 0xAF	; 175
      a8:	cb 4e       	sbci	r28, 0xEB	; 235
      aa:	44 c1       	rjmp	.+648    	; 0x334 <i2c_write+0x20>
      ac:	43 c6       	rjmp	.+3206   	; 0xd34 <__divsf3_pse+0x70>
      ae:	cc 49       	sbci	r28, 0x9C	; 156
      b0:	d8 5d       	subi	r29, 0xD8	; 216
      b2:	57 d2       	rcall	.+1198   	; 0x562 <wiinunchuck_avaragefilter+0x3c>
      b4:	f0 75       	andi	r31, 0x50	; 80
      b6:	7f fa       	.word	0xfa7f	; ????
      b8:	6b ee       	ldi	r22, 0xEB	; 235
      ba:	e4 61       	ori	r30, 0x14	; 20
      bc:	a0 25       	eor	r26, r0
      be:	2f aa       	std	Y+55, r2	; 0x37
      c0:	3b be       	out	0x3b, r3	; 59
      c2:	b4 31       	cpi	r27, 0x14	; 20
      c4:	13 96       	adiw	r26, 0x03	; 3
      c6:	9c 19       	sub	r25, r12
      c8:	88 0d       	add	r24, r8
      ca:	07 82       	std	Z+7, r0	; 0x07
      cc:	86 03       	fmuls	r16, r22
      ce:	09 8c       	ldd	r0, Y+25	; 0x19
      d0:	1d 98       	cbi	0x03, 5	; 3
      d2:	92 17       	cp	r25, r18
      d4:	35 b0       	in	r3, 0x05	; 5
      d6:	ba 3f       	cpi	r27, 0xFA	; 250
      d8:	ae 2b       	or	r26, r30
      da:	21 a4       	ldd	r2, Z+41	; 0x29
      dc:	65 e0       	ldi	r22, 0x05	; 5
      de:	ea 6f       	ori	r30, 0xFA	; 250
      e0:	fe 7b       	andi	r31, 0xBE	; 190
      e2:	71 f4       	brne	.+28     	; 0x100 <__trampolines_end+0x74>
      e4:	d6 53       	subi	r29, 0x36	; 54
      e6:	59 dc       	rcall	.-1870   	; 0xfffff99a <__eeprom_end+0xff7ef99a>
      e8:	4d c8       	rjmp	.-3942   	; 0xfffff184 <__eeprom_end+0xff7ef184>
      ea:	c2 47       	sbci	r28, 0x72	; 114
      ec:	c5 40       	sbci	r28, 0x05	; 5
      ee:	4a cf       	rjmp	.-364    	; 0xffffff84 <__eeprom_end+0xff7eff84>
      f0:	5e db       	rcall	.-2372   	; 0xfffff7ae <__eeprom_end+0xff7ef7ae>
      f2:	d1 54       	subi	r29, 0x41	; 65
      f4:	76 f3       	brts	.-36     	; 0xd2 <__trampolines_end+0x46>
      f6:	f9 7c       	andi	r31, 0xC9	; 201
      f8:	ed 68       	ori	r30, 0x8D	; 141
      fa:	62 e7       	ldi	r22, 0x72	; 114
      fc:	26 a3       	std	Z+38, r18	; 0x26
      fe:	a9 2c       	mov	r10, r9
     100:	bd 38       	cpi	r27, 0x8D	; 141
     102:	32 b7       	in	r19, 0x32	; 50
     104:	95 10       	cpse	r9, r5
     106:	1a 9f       	mul	r17, r26
     108:	0e 8b       	std	Y+22, r16	; 0x16
     10a:	81 04       	cpc	r8, r1
     10c:	89 0c       	add	r8, r9
     10e:	06 83       	std	Z+6, r16	; 0x06
     110:	12 97       	sbiw	r26, 0x02	; 2
     112:	9d 18       	sub	r9, r13
     114:	3a bf       	out	0x3a, r19	; 58
     116:	b5 30       	cpi	r27, 0x05	; 5
     118:	a1 24       	eor	r10, r1
     11a:	2e ab       	std	Y+54, r18	; 0x36
     11c:	6a ef       	ldi	r22, 0xFA	; 250
     11e:	e5 60       	ori	r30, 0x05	; 5
     120:	f1 74       	andi	r31, 0x41	; 65
     122:	7e fb       	.word	0xfb7e	; ????
     124:	d9 5c       	subi	r29, 0xC9	; 201
     126:	56 d3       	rcall	.+1708   	; 0x7d4 <wiinunchuck_init+0x38>
     128:	42 c7       	rjmp	.+3716   	; 0xfae <__divmodsi4+0x2>
     12a:	cd 48       	sbci	r28, 0x8D	; 141
     12c:	ca 4f       	sbci	r28, 0xFA	; 250
     12e:	45 c0       	rjmp	.+138    	; 0x1ba <initUSART+0xc>
     130:	51 d4       	rcall	.+2210   	; 0x9d4 <main+0x2e>
     132:	de 5b       	subi	r29, 0xBE	; 190
     134:	79 fc       	.word	0xfc79	; ????
     136:	f6 73       	andi	r31, 0x36	; 54
     138:	e2 67       	ori	r30, 0x72	; 114
     13a:	6d e8       	ldi	r22, 0x8D	; 141
     13c:	29 ac       	ldd	r2, Y+57	; 0x39
     13e:	a6 23       	and	r26, r22
     140:	b2 37       	cpi	r27, 0x72	; 114
     142:	3d b8       	out	0x0d, r3	; 13
     144:	9a 1f       	adc	r25, r26
     146:	15 90       	lpm	r1, Z+
     148:	01 84       	ldd	r0, Z+9	; 0x09
     14a:	8e 0b       	sbc	r24, r30
     14c:	0f 8a       	std	Y+23, r0	; 0x17
     14e:	80 05       	cpc	r24, r0
     150:	94 11       	cpse	r25, r4
     152:	1b 9e       	mul	r1, r27
     154:	bc 39       	cpi	r27, 0x9C	; 156
     156:	33 b6       	in	r3, 0x33	; 51
     158:	27 a2       	std	Z+39, r2	; 0x27
     15a:	a8 2d       	mov	r26, r8
     15c:	ec 69       	ori	r30, 0x9C	; 156
     15e:	63 e6       	ldi	r22, 0x63	; 99
     160:	77 f2       	brie	.-100    	; 0xfe <__trampolines_end+0x72>
     162:	f8 7d       	andi	r31, 0xD8	; 216
     164:	5f da       	rcall	.-2882   	; 0xfffff624 <__eeprom_end+0xff7ef624>
     166:	d0 55       	subi	r29, 0x50	; 80
     168:	c4 41       	sbci	r28, 0x14	; 20
     16a:	4b ce       	rjmp	.-874    	; 0xfffffe02 <__eeprom_end+0xff7efe02>
     16c:	4c c9       	rjmp	.-3432   	; 0xfffff406 <__eeprom_end+0xff7ef406>
     16e:	c3 46       	sbci	r28, 0x63	; 99
     170:	d7 52       	subi	r29, 0x27	; 39
     172:	58 dd       	rcall	.-1360   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     174:	ff 7a       	andi	r31, 0xAF	; 175
     176:	70 f5       	brcc	.+92     	; 0x1d4 <initUSART+0x26>
     178:	64 e1       	ldi	r22, 0x14	; 20
     17a:	eb 6e       	ori	r30, 0xEB	; 235
     17c:	af 2a       	or	r10, r31
     17e:	20 a5       	ldd	r18, Z+40	; 0x28
     180:	34 b1       	in	r19, 0x04	; 4
     182:	bb 3e       	cpi	r27, 0xEB	; 235
     184:	1c 99       	sbic	0x03, 4	; 3
     186:	93 16       	cp	r9, r19
     188:	87 02       	muls	r24, r23
     18a:	08 8d       	ldd	r16, Y+24	; 0x18

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	d0 e4       	ldi	r29, 0x40	; 64
     194:	de bf       	out	0x3e, r29	; 62
     196:	cd bf       	out	0x3d, r28	; 61

00000198 <__do_clear_bss>:
     198:	21 e0       	ldi	r18, 0x01	; 1
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b1 e0       	ldi	r27, 0x01	; 1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	a8 38       	cpi	r26, 0x88	; 136
     1a4:	b2 07       	cpc	r27, r18
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	fe d3       	rcall	.+2044   	; 0x9a6 <main>
     1aa:	59 c7       	rjmp	.+3762   	; 0x105e <_exit>

000001ac <__bad_interrupt>:
     1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <initUSART>:
	ax = ax / magnitude;
	ay = ay / magnitude;
	az = az / magnitude;
	*pitch = atan2(ax, sqrt(pow(ay,2) + pow(az, 2)));
	*roll = atan2(ay, az);
}
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	81 ec       	ldi	r24, 0xC1	; 193
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	21 ec       	ldi	r18, 0xC1	; 193
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	f9 01       	movw	r30, r18
     1c0:	20 81       	ld	r18, Z
     1c2:	28 61       	ori	r18, 0x18	; 24
     1c4:	fc 01       	movw	r30, r24
     1c6:	20 83       	st	Z, r18
     1c8:	84 ec       	ldi	r24, 0xC4	; 196
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	23 e3       	ldi	r18, 0x33	; 51
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18
     1d2:	85 ec       	ldi	r24, 0xC5	; 197
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	fc 01       	movw	r30, r24
     1d8:	10 82       	st	Z, r1
     1da:	00 00       	nop
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <USART_Send>:
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	1f 92       	push	r1
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	89 83       	std	Y+1, r24	; 0x01
     1ee:	00 00       	nop
     1f0:	80 ec       	ldi	r24, 0xC0	; 192
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	fc 01       	movw	r30, r24
     1f6:	80 81       	ld	r24, Z
     1f8:	88 2f       	mov	r24, r24
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	80 72       	andi	r24, 0x20	; 32
     1fe:	99 27       	eor	r25, r25
     200:	89 2b       	or	r24, r25
     202:	b1 f3       	breq	.-20     	; 0x1f0 <USART_Send+0xe>
     204:	86 ec       	ldi	r24, 0xC6	; 198
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	29 81       	ldd	r18, Y+1	; 0x01
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18
     20e:	00 00       	nop
     210:	0f 90       	pop	r0
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <i2c_init>:
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	89 eb       	ldi	r24, 0xB9	; 185
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	fc 01       	movw	r30, r24
     226:	10 82       	st	Z, r1
     228:	88 eb       	ldi	r24, 0xB8	; 184
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	28 e8       	ldi	r18, 0x88	; 136
     22e:	fc 01       	movw	r30, r24
     230:	20 83       	st	Z, r18
     232:	00 00       	nop
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <i2c_start_wait>:
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	00 d0       	rcall	.+0      	; 0x240 <i2c_start_wait+0x6>
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	8a 83       	std	Y+2, r24	; 0x02
     246:	8c eb       	ldi	r24, 0xBC	; 188
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	24 ea       	ldi	r18, 0xA4	; 164
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
     250:	00 00       	nop
     252:	8c eb       	ldi	r24, 0xBC	; 188
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	fc 01       	movw	r30, r24
     258:	80 81       	ld	r24, Z
     25a:	88 23       	and	r24, r24
     25c:	d4 f7       	brge	.-12     	; 0x252 <i2c_start_wait+0x18>
     25e:	89 eb       	ldi	r24, 0xB9	; 185
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	88 7f       	andi	r24, 0xF8	; 248
     268:	89 83       	std	Y+1, r24	; 0x01
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	88 30       	cpi	r24, 0x08	; 8
     26e:	19 f0       	breq	.+6      	; 0x276 <i2c_start_wait+0x3c>
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	80 31       	cpi	r24, 0x10	; 16
     274:	71 f5       	brne	.+92     	; 0x2d2 <i2c_start_wait+0x98>
     276:	8b eb       	ldi	r24, 0xBB	; 187
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	2a 81       	ldd	r18, Y+2	; 0x02
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
     280:	8c eb       	ldi	r24, 0xBC	; 188
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	24 e8       	ldi	r18, 0x84	; 132
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
     28a:	00 00       	nop
     28c:	8c eb       	ldi	r24, 0xBC	; 188
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	fc 01       	movw	r30, r24
     292:	80 81       	ld	r24, Z
     294:	88 23       	and	r24, r24
     296:	d4 f7       	brge	.-12     	; 0x28c <i2c_start_wait+0x52>
     298:	89 eb       	ldi	r24, 0xB9	; 185
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	fc 01       	movw	r30, r24
     29e:	80 81       	ld	r24, Z
     2a0:	88 7f       	andi	r24, 0xF8	; 248
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	80 32       	cpi	r24, 0x20	; 32
     2a8:	19 f0       	breq	.+6      	; 0x2b0 <i2c_start_wait+0x76>
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	88 35       	cpi	r24, 0x58	; 88
     2ae:	99 f4       	brne	.+38     	; 0x2d6 <i2c_start_wait+0x9c>
     2b0:	8c eb       	ldi	r24, 0xBC	; 188
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	24 e9       	ldi	r18, 0x94	; 148
     2b6:	fc 01       	movw	r30, r24
     2b8:	20 83       	st	Z, r18
     2ba:	00 00       	nop
     2bc:	8c eb       	ldi	r24, 0xBC	; 188
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	80 81       	ld	r24, Z
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	80 71       	andi	r24, 0x10	; 16
     2ca:	99 27       	eor	r25, r25
     2cc:	89 2b       	or	r24, r25
     2ce:	b1 f7       	brne	.-20     	; 0x2bc <i2c_start_wait+0x82>
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <i2c_start_wait+0x9a>
     2d2:	00 00       	nop
     2d4:	b8 cf       	rjmp	.-144    	; 0x246 <i2c_start_wait+0xc>
     2d6:	00 00       	nop
     2d8:	00 00       	nop
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	08 95       	ret

000002e4 <i2c_stop>:
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	8c eb       	ldi	r24, 0xBC	; 188
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	24 e9       	ldi	r18, 0x94	; 148
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
     2f6:	00 00       	nop
     2f8:	8c eb       	ldi	r24, 0xBC	; 188
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	fc 01       	movw	r30, r24
     2fe:	80 81       	ld	r24, Z
     300:	88 2f       	mov	r24, r24
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	80 71       	andi	r24, 0x10	; 16
     306:	99 27       	eor	r25, r25
     308:	89 2b       	or	r24, r25
     30a:	b1 f7       	brne	.-20     	; 0x2f8 <i2c_stop+0x14>
     30c:	00 00       	nop
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <i2c_write>:
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	00 d0       	rcall	.+0      	; 0x31a <i2c_write+0x6>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	8a 83       	std	Y+2, r24	; 0x02
     320:	8b eb       	ldi	r24, 0xBB	; 187
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	2a 81       	ldd	r18, Y+2	; 0x02
     326:	fc 01       	movw	r30, r24
     328:	20 83       	st	Z, r18
     32a:	8c eb       	ldi	r24, 0xBC	; 188
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	24 e8       	ldi	r18, 0x84	; 132
     330:	fc 01       	movw	r30, r24
     332:	20 83       	st	Z, r18
     334:	00 00       	nop
     336:	8c eb       	ldi	r24, 0xBC	; 188
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	fc 01       	movw	r30, r24
     33c:	80 81       	ld	r24, Z
     33e:	88 23       	and	r24, r24
     340:	d4 f7       	brge	.-12     	; 0x336 <i2c_write+0x22>
     342:	89 eb       	ldi	r24, 0xB9	; 185
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	fc 01       	movw	r30, r24
     348:	80 81       	ld	r24, Z
     34a:	88 7f       	andi	r24, 0xF8	; 248
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	88 32       	cpi	r24, 0x28	; 40
     352:	11 f0       	breq	.+4      	; 0x358 <i2c_write+0x44>
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	01 c0       	rjmp	.+2      	; 0x35a <i2c_write+0x46>
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <i2c_readAck>:
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	8c eb       	ldi	r24, 0xBC	; 188
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	24 ec       	ldi	r18, 0xC4	; 196
     372:	fc 01       	movw	r30, r24
     374:	20 83       	st	Z, r18
     376:	00 00       	nop
     378:	8c eb       	ldi	r24, 0xBC	; 188
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	fc 01       	movw	r30, r24
     37e:	80 81       	ld	r24, Z
     380:	88 23       	and	r24, r24
     382:	d4 f7       	brge	.-12     	; 0x378 <i2c_readAck+0x14>
     384:	8b eb       	ldi	r24, 0xBB	; 187
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	fc 01       	movw	r30, r24
     38a:	80 81       	ld	r24, Z
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <i2c_readNak>:
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	8c eb       	ldi	r24, 0xBC	; 188
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	24 e8       	ldi	r18, 0x84	; 132
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18
     3a4:	00 00       	nop
     3a6:	8c eb       	ldi	r24, 0xBC	; 188
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	fc 01       	movw	r30, r24
     3ac:	80 81       	ld	r24, Z
     3ae:	88 23       	and	r24, r24
     3b0:	d4 f7       	brge	.-12     	; 0x3a6 <i2c_readNak+0x14>
     3b2:	8b eb       	ldi	r24, 0xBB	; 187
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	fc 01       	movw	r30, r24
     3b8:	80 81       	ld	r24, Z
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <wiinunchuck_getjoyX>:
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <wiinunchuck_getjoyX+0x6>
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     3ce:	88 2f       	mov	r24, r24
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	9a 83       	std	Y+2, r25	; 0x02
     3d4:	89 83       	std	Y+1, r24	; 0x01
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	8a 38       	cpi	r24, 0x8A	; 138
     3dc:	91 05       	cpc	r25, r1
     3de:	94 f4       	brge	.+36     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3e0:	29 81       	ldd	r18, Y+1	; 0x01
     3e2:	3a 81       	ldd	r19, Y+2	; 0x02
     3e4:	c9 01       	movw	r24, r18
     3e6:	96 95       	lsr	r25
     3e8:	98 2f       	mov	r25, r24
     3ea:	88 27       	eor	r24, r24
     3ec:	97 95       	ror	r25
     3ee:	87 95       	ror	r24
     3f0:	82 1b       	sub	r24, r18
     3f2:	93 0b       	sbc	r25, r19
     3f4:	29 e8       	ldi	r18, 0x89	; 137
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	b9 01       	movw	r22, r18
     3fa:	c5 d5       	rcall	.+2954   	; 0xf86 <__divmodhi4>
     3fc:	cb 01       	movw	r24, r22
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01
     402:	12 c0       	rjmp	.+36     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	89 58       	subi	r24, 0x89	; 137
     40a:	91 09       	sbc	r25, r1
     40c:	96 95       	lsr	r25
     40e:	98 2f       	mov	r25, r24
     410:	88 27       	eor	r24, r24
     412:	97 95       	ror	r25
     414:	87 95       	ror	r24
     416:	26 e7       	ldi	r18, 0x76	; 118
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	b9 01       	movw	r22, r18
     41c:	b4 d5       	rcall	.+2920   	; 0xf86 <__divmodhi4>
     41e:	cb 01       	movw	r24, r22
     420:	82 58       	subi	r24, 0x82	; 130
     422:	9f 4f       	sbci	r25, 0xFF	; 255
     424:	9a 83       	std	Y+2, r25	; 0x02
     426:	89 83       	std	Y+1, r24	; 0x01
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	8f 57       	subi	r24, 0x7F	; 127
     42e:	91 09       	sbc	r25, r1
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <wiinunchuck_getjoyY>:
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	00 d0       	rcall	.+0      	; 0x440 <wiinunchuck_getjoyY+0x6>
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <wiinunchuck_joyY>
     448:	88 2f       	mov	r24, r24
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9a 83       	std	Y+2, r25	; 0x02
     44e:	89 83       	std	Y+1, r24	; 0x01
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	8a 38       	cpi	r24, 0x8A	; 138
     456:	91 05       	cpc	r25, r1
     458:	94 f4       	brge	.+36     	; 0x47e <wiinunchuck_getjoyY+0x44>
     45a:	29 81       	ldd	r18, Y+1	; 0x01
     45c:	3a 81       	ldd	r19, Y+2	; 0x02
     45e:	c9 01       	movw	r24, r18
     460:	96 95       	lsr	r25
     462:	98 2f       	mov	r25, r24
     464:	88 27       	eor	r24, r24
     466:	97 95       	ror	r25
     468:	87 95       	ror	r24
     46a:	82 1b       	sub	r24, r18
     46c:	93 0b       	sbc	r25, r19
     46e:	29 e8       	ldi	r18, 0x89	; 137
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	b9 01       	movw	r22, r18
     474:	88 d5       	rcall	.+2832   	; 0xf86 <__divmodhi4>
     476:	cb 01       	movw	r24, r22
     478:	9a 83       	std	Y+2, r25	; 0x02
     47a:	89 83       	std	Y+1, r24	; 0x01
     47c:	12 c0       	rjmp	.+36     	; 0x4a2 <wiinunchuck_getjoyY+0x68>
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	9a 81       	ldd	r25, Y+2	; 0x02
     482:	89 58       	subi	r24, 0x89	; 137
     484:	91 09       	sbc	r25, r1
     486:	96 95       	lsr	r25
     488:	98 2f       	mov	r25, r24
     48a:	88 27       	eor	r24, r24
     48c:	97 95       	ror	r25
     48e:	87 95       	ror	r24
     490:	26 e7       	ldi	r18, 0x76	; 118
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	b9 01       	movw	r22, r18
     496:	77 d5       	rcall	.+2798   	; 0xf86 <__divmodhi4>
     498:	cb 01       	movw	r24, r22
     49a:	82 58       	subi	r24, 0x82	; 130
     49c:	9f 4f       	sbci	r25, 0xFF	; 255
     49e:	9a 83       	std	Y+2, r25	; 0x02
     4a0:	89 83       	std	Y+1, r24	; 0x01
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	8f 57       	subi	r24, 0x7F	; 127
     4a8:	91 09       	sbc	r25, r1
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <wiinunchuck_getbuttonZ>:
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <wiinunchuck_buttonZ>
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <wiinunchuck_getbuttonC>:
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <wiinunchuck_buttonC>
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <wiinunchuck_getangleX>:
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <wiinunchuck_angleX>
     4e4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <wiinunchuck_angleX+0x1>
     4e8:	8f 50       	subi	r24, 0x0F	; 15
     4ea:	92 40       	sbci	r25, 0x02	; 2
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <wiinunchuck_getangleY>:
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wiinunchuck_angleY>
     4fe:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <wiinunchuck_angleY+0x1>
     502:	83 51       	subi	r24, 0x13	; 19
     504:	92 40       	sbci	r25, 0x02	; 2
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <wiinunchuck_getangleZ>:
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <wiinunchuck_angleZ>
     518:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <wiinunchuck_angleZ+0x1>
     51c:	82 51       	subi	r24, 0x12	; 18
     51e:	92 40       	sbci	r25, 0x02	; 2
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <wiinunchuck_avaragefilter>:

#if WIINUNCHUCK_ANGLEFILTER == 1
/*
 * avarage filter over an array
 */
int wiinunchuck_avaragefilter(int input, int wiinunchuck_avarageangle[]) {
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	29 97       	sbiw	r28, 0x09	; 9
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	9f 83       	std	Y+7, r25	; 0x07
     53c:	8e 83       	std	Y+6, r24	; 0x06
     53e:	79 87       	std	Y+9, r23	; 0x09
     540:	68 87       	std	Y+8, r22	; 0x08
	uint8_t i=0;
     542:	19 82       	std	Y+1, r1	; 0x01
	long sum=0;
     544:	1a 82       	std	Y+2, r1	; 0x02
     546:	1b 82       	std	Y+3, r1	; 0x03
     548:	1c 82       	std	Y+4, r1	; 0x04
     54a:	1d 82       	std	Y+5, r1	; 0x05
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
     54c:	19 82       	std	Y+1, r1	; 0x01
     54e:	1d c0       	rjmp	.+58     	; 0x58a <wiinunchuck_avaragefilter+0x64>
		wiinunchuck_avarageangle[i] = wiinunchuck_avarageangle[i+1];
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	88 2f       	mov	r24, r24
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	28 85       	ldd	r18, Y+8	; 0x08
     55c:	39 85       	ldd	r19, Y+9	; 0x09
     55e:	82 0f       	add	r24, r18
     560:	93 1f       	adc	r25, r19
     562:	29 81       	ldd	r18, Y+1	; 0x01
     564:	22 2f       	mov	r18, r18
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	2f 5f       	subi	r18, 0xFF	; 255
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	22 0f       	add	r18, r18
     56e:	33 1f       	adc	r19, r19
     570:	48 85       	ldd	r20, Y+8	; 0x08
     572:	59 85       	ldd	r21, Y+9	; 0x09
     574:	24 0f       	add	r18, r20
     576:	35 1f       	adc	r19, r21
     578:	f9 01       	movw	r30, r18
     57a:	20 81       	ld	r18, Z
     57c:	31 81       	ldd	r19, Z+1	; 0x01
     57e:	fc 01       	movw	r30, r24
     580:	31 83       	std	Z+1, r19	; 0x01
     582:	20 83       	st	Z, r18
 * avarage filter over an array
 */
int wiinunchuck_avaragefilter(int input, int wiinunchuck_avarageangle[]) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	8f 5f       	subi	r24, 0xFF	; 255
     588:	89 83       	std	Y+1, r24	; 0x01
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	85 31       	cpi	r24, 0x15	; 21
     58e:	00 f3       	brcs	.-64     	; 0x550 <wiinunchuck_avaragefilter+0x2a>
		wiinunchuck_avarageangle[i] = wiinunchuck_avarageangle[i+1];
	}
	wiinunchuck_avarageangle[WIINUNCHUCK_ANGLEAVARAGECOEF-1] = input;
     590:	88 85       	ldd	r24, Y+8	; 0x08
     592:	99 85       	ldd	r25, Y+9	; 0x09
     594:	88 96       	adiw	r24, 0x28	; 40
     596:	2e 81       	ldd	r18, Y+6	; 0x06
     598:	3f 81       	ldd	r19, Y+7	; 0x07
     59a:	fc 01       	movw	r30, r24
     59c:	31 83       	std	Z+1, r19	; 0x01
     59e:	20 83       	st	Z, r18
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
     5a0:	19 82       	std	Y+1, r1	; 0x01
     5a2:	1f c0       	rjmp	.+62     	; 0x5e2 <wiinunchuck_avaragefilter+0xbc>
		sum += wiinunchuck_avarageangle[i];
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	88 2f       	mov	r24, r24
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	28 85       	ldd	r18, Y+8	; 0x08
     5b0:	39 85       	ldd	r19, Y+9	; 0x09
     5b2:	82 0f       	add	r24, r18
     5b4:	93 1f       	adc	r25, r19
     5b6:	fc 01       	movw	r30, r24
     5b8:	80 81       	ld	r24, Z
     5ba:	91 81       	ldd	r25, Z+1	; 0x01
     5bc:	09 2e       	mov	r0, r25
     5be:	00 0c       	add	r0, r0
     5c0:	aa 0b       	sbc	r26, r26
     5c2:	bb 0b       	sbc	r27, r27
     5c4:	2a 81       	ldd	r18, Y+2	; 0x02
     5c6:	3b 81       	ldd	r19, Y+3	; 0x03
     5c8:	4c 81       	ldd	r20, Y+4	; 0x04
     5ca:	5d 81       	ldd	r21, Y+5	; 0x05
     5cc:	82 0f       	add	r24, r18
     5ce:	93 1f       	adc	r25, r19
     5d0:	a4 1f       	adc	r26, r20
     5d2:	b5 1f       	adc	r27, r21
     5d4:	8a 83       	std	Y+2, r24	; 0x02
     5d6:	9b 83       	std	Y+3, r25	; 0x03
     5d8:	ac 83       	std	Y+4, r26	; 0x04
     5da:	bd 83       	std	Y+5, r27	; 0x05
	long sum=0;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
		wiinunchuck_avarageangle[i] = wiinunchuck_avarageangle[i+1];
	}
	wiinunchuck_avarageangle[WIINUNCHUCK_ANGLEAVARAGECOEF-1] = input;
	for (i=0; i<WIINUNCHUCK_ANGLEAVARAGECOEF; i++) {
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	8f 5f       	subi	r24, 0xFF	; 255
     5e0:	89 83       	std	Y+1, r24	; 0x01
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	85 31       	cpi	r24, 0x15	; 21
     5e6:	f0 f2       	brcs	.-68     	; 0x5a4 <wiinunchuck_avaragefilter+0x7e>
		sum += wiinunchuck_avarageangle[i];
	}
	return (sum/WIINUNCHUCK_ANGLEAVARAGECOEF);
     5e8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ea:	9b 81       	ldd	r25, Y+3	; 0x03
     5ec:	ac 81       	ldd	r26, Y+4	; 0x04
     5ee:	bd 81       	ldd	r27, Y+5	; 0x05
     5f0:	25 e1       	ldi	r18, 0x15	; 21
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	bc 01       	movw	r22, r24
     5fa:	cd 01       	movw	r24, r26
     5fc:	d7 d4       	rcall	.+2478   	; 0xfac <__divmodsi4>
     5fe:	da 01       	movw	r26, r20
     600:	c9 01       	movw	r24, r18
}
     602:	29 96       	adiw	r28, 0x09	; 9
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <wiinunchuck_update>:
#endif

/*
 * get new data
 */
void wiinunchuck_update() {
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	27 97       	sbiw	r28, 0x07	; 7
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
	uint8_t i=0;
     62c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t buff[WIINUNCHUCK_READBYTES];
	memset(buff, 0, sizeof(buff));
     62e:	ce 01       	movw	r24, r28
     630:	02 96       	adiw	r24, 0x02	; 2
     632:	46 e0       	ldi	r20, 0x06	; 6
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	0a d5       	rcall	.+2580   	; 0x1050 <memset>

	//request data
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_WRITE);
     63c:	84 ea       	ldi	r24, 0xA4	; 164
     63e:	fd dd       	rcall	.-1030   	; 0x23a <i2c_start_wait>
	i2c_write(0x00);
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	68 de       	rcall	.-816    	; 0x314 <i2c_write>
	i2c_stop();
     644:	4f de       	rcall	.-866    	; 0x2e4 <i2c_stop>
     646:	85 ea       	ldi	r24, 0xA5	; 165
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_READ);
     648:	f8 dd       	rcall	.-1040   	; 0x23a <i2c_start_wait>
     64a:	19 82       	std	Y+1, r1	; 0x01
     64c:	1d c0       	rjmp	.+58     	; 0x688 <wiinunchuck_update+0x74>
	for(i=0; i<WIINUNCHUCK_READBYTES; i++) {
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	85 30       	cpi	r24, 0x05	; 5
		if(i==WIINUNCHUCK_READBYTES-1)
     652:	61 f4       	brne	.+24     	; 0x66c <wiinunchuck_update+0x58>
     654:	89 81       	ldd	r24, Y+1	; 0x01
			buff[i] = i2c_readNak();
     656:	08 2f       	mov	r16, r24
     658:	10 e0       	ldi	r17, 0x00	; 0
     65a:	9b de       	rcall	.-714    	; 0x392 <i2c_readNak>
     65c:	28 2f       	mov	r18, r24
     65e:	ce 01       	movw	r24, r28
     660:	02 96       	adiw	r24, 0x02	; 2
     662:	80 0f       	add	r24, r16
     664:	91 1f       	adc	r25, r17
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
     66a:	0b c0       	rjmp	.+22     	; 0x682 <wiinunchuck_update+0x6e>
     66c:	89 81       	ldd	r24, Y+1	; 0x01
		else
			buff[i] = i2c_readAck();
     66e:	08 2f       	mov	r16, r24
     670:	10 e0       	ldi	r17, 0x00	; 0
     672:	78 de       	rcall	.-784    	; 0x364 <i2c_readAck>
     674:	28 2f       	mov	r18, r24
     676:	ce 01       	movw	r24, r28
     678:	02 96       	adiw	r24, 0x02	; 2
     67a:	80 0f       	add	r24, r16
     67c:	91 1f       	adc	r25, r17
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
     682:	89 81       	ldd	r24, Y+1	; 0x01
	//request data
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_WRITE);
	i2c_write(0x00);
	i2c_stop();
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_READ);
	for(i=0; i<WIINUNCHUCK_READBYTES; i++) {
     684:	8f 5f       	subi	r24, 0xFF	; 255
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	86 30       	cpi	r24, 0x06	; 6
     68c:	00 f3       	brcs	.-64     	; 0x64e <wiinunchuck_update+0x3a>
     68e:	2a de       	rcall	.-940    	; 0x2e4 <i2c_stop>
		if(i==WIINUNCHUCK_READBYTES-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
     690:	8a 81       	ldd	r24, Y+2	; 0x02
     692:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	wiinunchuck_lastbuttonZ = wiinunchuck_buttonZ;
	wiinunchuck_lastbuttonC = wiinunchuck_buttonC;
	#endif

	//get joypad
	wiinunchuck_joyX = buff[0];
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <wiinunchuck_joyY>
	wiinunchuck_joyY = buff[1];
     69c:	8f 81       	ldd	r24, Y+7	; 0x07
     69e:	88 2f       	mov	r24, r24

	//get button
	wiinunchuck_buttonZ = !(buff[5] & 0b00000001);
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	81 70       	andi	r24, 0x01	; 1
     6a4:	99 27       	eor	r25, r25
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	89 2b       	or	r24, r25
     6aa:	09 f0       	breq	.+2      	; 0x6ae <wiinunchuck_update+0x9a>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	82 2f       	mov	r24, r18
     6b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <wiinunchuck_buttonZ>
     6b4:	8f 81       	ldd	r24, Y+7	; 0x07
     6b6:	88 2f       	mov	r24, r24
	wiinunchuck_buttonC = !((buff[5] & 0b00000010) >> 1);
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	82 70       	andi	r24, 0x02	; 2
     6bc:	99 27       	eor	r25, r25
     6be:	95 95       	asr	r25
     6c0:	87 95       	ror	r24
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	89 2b       	or	r24, r25
     6c6:	09 f0       	breq	.+2      	; 0x6ca <wiinunchuck_update+0xb6>
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	82 2f       	mov	r24, r18
     6cc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <wiinunchuck_buttonC>
     6d0:	8c 81       	ldd	r24, Y+4	; 0x04
     6d2:	88 2f       	mov	r24, r24

	//get angle
	wiinunchuck_angleX = (buff[2] << 2) + ((buff[5] & (0b00000011 << (1*2)) >> (1*2)));
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	9c 01       	movw	r18, r24
     6d8:	22 0f       	add	r18, r18
     6da:	33 1f       	adc	r19, r19
     6dc:	22 0f       	add	r18, r18
     6de:	33 1f       	adc	r19, r19
     6e0:	8f 81       	ldd	r24, Y+7	; 0x07
     6e2:	88 2f       	mov	r24, r24
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	83 70       	andi	r24, 0x03	; 3
     6e8:	99 27       	eor	r25, r25
     6ea:	82 0f       	add	r24, r18
     6ec:	93 1f       	adc	r25, r19
     6ee:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <wiinunchuck_angleX+0x1>
     6f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <wiinunchuck_angleX>
     6f6:	8d 81       	ldd	r24, Y+5	; 0x05
     6f8:	88 2f       	mov	r24, r24
	wiinunchuck_angleY = (buff[3] << 2) + ((buff[5] & (0b00000011 << (2*2)) >> (2*2)));
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	9c 01       	movw	r18, r24
     6fe:	22 0f       	add	r18, r18
     700:	33 1f       	adc	r19, r19
     702:	22 0f       	add	r18, r18
     704:	33 1f       	adc	r19, r19
     706:	8f 81       	ldd	r24, Y+7	; 0x07
     708:	88 2f       	mov	r24, r24
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	83 70       	andi	r24, 0x03	; 3
     70e:	99 27       	eor	r25, r25
     710:	82 0f       	add	r24, r18
     712:	93 1f       	adc	r25, r19
     714:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <wiinunchuck_angleY+0x1>
     718:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <wiinunchuck_angleY>
     71c:	8e 81       	ldd	r24, Y+6	; 0x06
     71e:	88 2f       	mov	r24, r24
	wiinunchuck_angleZ = (buff[4] << 2) + ((buff[5] & (0b00000011 << (3*2)) >> (3*2)));
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	9c 01       	movw	r18, r24
     724:	22 0f       	add	r18, r18
     726:	33 1f       	adc	r19, r19
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	8f 81       	ldd	r24, Y+7	; 0x07
     72e:	88 2f       	mov	r24, r24
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	83 70       	andi	r24, 0x03	; 3
     734:	99 27       	eor	r25, r25
     736:	82 0f       	add	r24, r18
     738:	93 1f       	adc	r25, r19
     73a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <wiinunchuck_angleZ+0x1>
     73e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <wiinunchuck_angleZ>
     742:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <wiinunchuck_angleX>

	//filter angle
	#if WIINUNCHUCK_ANGLEFILTER == 1
	wiinunchuck_angleX = wiinunchuck_avaragefilter(wiinunchuck_angleX, (int *)wiinunchuck_avarageangleX);
     746:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <wiinunchuck_angleX+0x1>
     74a:	64 e3       	ldi	r22, 0x34	; 52
     74c:	71 e0       	ldi	r23, 0x01	; 1
     74e:	eb de       	rcall	.-554    	; 0x526 <wiinunchuck_avaragefilter>
     750:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <wiinunchuck_angleX+0x1>
     754:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <wiinunchuck_angleX>
     758:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wiinunchuck_angleY>
	wiinunchuck_angleY = wiinunchuck_avaragefilter(wiinunchuck_angleY, (int *)wiinunchuck_avarageangleY);
     75c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <wiinunchuck_angleY+0x1>
     760:	6a e0       	ldi	r22, 0x0A	; 10
     762:	71 e0       	ldi	r23, 0x01	; 1
     764:	e0 de       	rcall	.-576    	; 0x526 <wiinunchuck_avaragefilter>
     766:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <wiinunchuck_angleY+0x1>
     76a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <wiinunchuck_angleY>
     76e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <wiinunchuck_angleZ>
	wiinunchuck_angleZ = wiinunchuck_avaragefilter(wiinunchuck_angleZ, (int *)wiinunchuck_avarageangleZ);
     772:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <wiinunchuck_angleZ+0x1>
     776:	6e e5       	ldi	r22, 0x5E	; 94
     778:	71 e0       	ldi	r23, 0x01	; 1
     77a:	d5 de       	rcall	.-598    	; 0x526 <wiinunchuck_avaragefilter>
     77c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <wiinunchuck_angleZ+0x1>
     780:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <wiinunchuck_angleZ>
     784:	00 00       	nop
     786:	27 96       	adiw	r28, 0x07	; 7
	#endif
}
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	08 95       	ret

0000079c <wiinunchuck_init>:
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29


/*
 * init wiinunchuck
 */
void wiinunchuck_init() {
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	a0 97       	sbiw	r28, 0x20	; 32
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
	#if WIINUNCHUCK_I2CINIT == 1
	//init i2c
	i2c_init();
     7b0:	33 dd       	rcall	.-1434   	; 0x218 <i2c_init>
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	a8 ec       	ldi	r26, 0xC8	; 200
     7b8:	b2 e4       	ldi	r27, 0x42	; 66
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	ab 83       	std	Y+3, r26	; 0x03
     7c0:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     7c2:	2b ea       	ldi	r18, 0xAB	; 171
     7c4:	3a ea       	ldi	r19, 0xAA	; 170
     7c6:	4a ea       	ldi	r20, 0xAA	; 170
     7c8:	5e e3       	ldi	r21, 0x3E	; 62
     7ca:	69 81       	ldd	r22, Y+1	; 0x01
     7cc:	7a 81       	ldd	r23, Y+2	; 0x02
     7ce:	8b 81       	ldd	r24, Y+3	; 0x03
     7d0:	9c 81       	ldd	r25, Y+4	; 0x04
     7d2:	76 d3       	rcall	.+1772   	; 0xec0 <__mulsf3>
     7d4:	dc 01       	movw	r26, r24
     7d6:	cb 01       	movw	r24, r22
     7d8:	8d 83       	std	Y+5, r24	; 0x05
     7da:	9e 83       	std	Y+6, r25	; 0x06
     7dc:	af 83       	std	Y+7, r26	; 0x07
     7de:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e8       	ldi	r20, 0x80	; 128
     7e6:	5e e3       	ldi	r21, 0x3E	; 62
     7e8:	69 81       	ldd	r22, Y+1	; 0x01
     7ea:	7a 81       	ldd	r23, Y+2	; 0x02
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	9c 81       	ldd	r25, Y+4	; 0x04
     7f0:	67 d3       	rcall	.+1742   	; 0xec0 <__mulsf3>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	89 87       	std	Y+9, r24	; 0x09
     7f8:	9a 87       	std	Y+10, r25	; 0x0a
     7fa:	ab 87       	std	Y+11, r26	; 0x0b
     7fc:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	40 e8       	ldi	r20, 0x80	; 128
     804:	5f e3       	ldi	r21, 0x3F	; 63
     806:	6d 81       	ldd	r22, Y+5	; 0x05
     808:	7e 81       	ldd	r23, Y+6	; 0x06
     80a:	8f 81       	ldd	r24, Y+7	; 0x07
     80c:	98 85       	ldd	r25, Y+8	; 0x08
     80e:	47 d2       	rcall	.+1166   	; 0xc9e <__cmpsf2>
     810:	88 23       	and	r24, r24
     812:	1c f4       	brge	.+6      	; 0x81a <wiinunchuck_init+0x7e>
		__ticks = 1;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	8d 87       	std	Y+13, r24	; 0x0d
     818:	a7 c0       	rjmp	.+334    	; 0x968 <wiinunchuck_init+0x1cc>
	else if (__tmp2 > 65535)
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	3f ef       	ldi	r19, 0xFF	; 255
     81e:	4f e7       	ldi	r20, 0x7F	; 127
     820:	57 e4       	ldi	r21, 0x47	; 71
     822:	69 85       	ldd	r22, Y+9	; 0x09
     824:	7a 85       	ldd	r23, Y+10	; 0x0a
     826:	8b 85       	ldd	r24, Y+11	; 0x0b
     828:	9c 85       	ldd	r25, Y+12	; 0x0c
     82a:	46 d3       	rcall	.+1676   	; 0xeb8 <__gesf2>
     82c:	18 16       	cp	r1, r24
     82e:	0c f0       	brlt	.+2      	; 0x832 <wiinunchuck_init+0x96>
     830:	74 c0       	rjmp	.+232    	; 0x91a <wiinunchuck_init+0x17e>
	{
		_delay_ms(__us / 1000.0);
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	4a e7       	ldi	r20, 0x7A	; 122
     838:	54 e4       	ldi	r21, 0x44	; 68
     83a:	69 81       	ldd	r22, Y+1	; 0x01
     83c:	7a 81       	ldd	r23, Y+2	; 0x02
     83e:	8b 81       	ldd	r24, Y+3	; 0x03
     840:	9c 81       	ldd	r25, Y+4	; 0x04
     842:	31 d2       	rcall	.+1122   	; 0xca6 <__divsf3>
     844:	dc 01       	movw	r26, r24
     846:	cb 01       	movw	r24, r22
     848:	8e 87       	std	Y+14, r24	; 0x0e
     84a:	9f 87       	std	Y+15, r25	; 0x0f
     84c:	a8 8b       	std	Y+16, r26	; 0x10
     84e:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	4a e7       	ldi	r20, 0x7A	; 122
     856:	53 e4       	ldi	r21, 0x43	; 67
     858:	6e 85       	ldd	r22, Y+14	; 0x0e
     85a:	7f 85       	ldd	r23, Y+15	; 0x0f
     85c:	88 89       	ldd	r24, Y+16	; 0x10
     85e:	99 89       	ldd	r25, Y+17	; 0x11
     860:	2f d3       	rcall	.+1630   	; 0xec0 <__mulsf3>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	8a 8b       	std	Y+18, r24	; 0x12
     868:	9b 8b       	std	Y+19, r25	; 0x13
     86a:	ac 8b       	std	Y+20, r26	; 0x14
     86c:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e8       	ldi	r20, 0x80	; 128
     874:	5f e3       	ldi	r21, 0x3F	; 63
     876:	6a 89       	ldd	r22, Y+18	; 0x12
     878:	7b 89       	ldd	r23, Y+19	; 0x13
     87a:	8c 89       	ldd	r24, Y+20	; 0x14
     87c:	9d 89       	ldd	r25, Y+21	; 0x15
     87e:	0f d2       	rcall	.+1054   	; 0xc9e <__cmpsf2>
     880:	88 23       	and	r24, r24
     882:	2c f4       	brge	.+10     	; 0x88e <wiinunchuck_init+0xf2>
		__ticks = 1;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	9f 8b       	std	Y+23, r25	; 0x17
     88a:	8e 8b       	std	Y+22, r24	; 0x16
     88c:	3b c0       	rjmp	.+118    	; 0x904 <wiinunchuck_init+0x168>
	else if (__tmp > 65535)
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	3f ef       	ldi	r19, 0xFF	; 255
     892:	4f e7       	ldi	r20, 0x7F	; 127
     894:	57 e4       	ldi	r21, 0x47	; 71
     896:	6a 89       	ldd	r22, Y+18	; 0x12
     898:	7b 89       	ldd	r23, Y+19	; 0x13
     89a:	8c 89       	ldd	r24, Y+20	; 0x14
     89c:	9d 89       	ldd	r25, Y+21	; 0x15
     89e:	0c d3       	rcall	.+1560   	; 0xeb8 <__gesf2>
     8a0:	18 16       	cp	r1, r24
     8a2:	3c f5       	brge	.+78     	; 0x8f2 <wiinunchuck_init+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	40 e2       	ldi	r20, 0x20	; 32
     8aa:	51 e4       	ldi	r21, 0x41	; 65
     8ac:	6e 85       	ldd	r22, Y+14	; 0x0e
     8ae:	7f 85       	ldd	r23, Y+15	; 0x0f
     8b0:	88 89       	ldd	r24, Y+16	; 0x10
     8b2:	99 89       	ldd	r25, Y+17	; 0x11
     8b4:	05 d3       	rcall	.+1546   	; 0xec0 <__mulsf3>
     8b6:	dc 01       	movw	r26, r24
     8b8:	cb 01       	movw	r24, r22
     8ba:	bc 01       	movw	r22, r24
     8bc:	cd 01       	movw	r24, r26
     8be:	5b d2       	rcall	.+1206   	; 0xd76 <__fixunssfsi>
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
     8c4:	9f 8b       	std	Y+23, r25	; 0x17
     8c6:	8e 8b       	std	Y+22, r24	; 0x16
     8c8:	0f c0       	rjmp	.+30     	; 0x8e8 <wiinunchuck_init+0x14c>
     8ca:	89 e1       	ldi	r24, 0x19	; 25
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	99 8f       	std	Y+25, r25	; 0x19
     8d0:	88 8f       	std	Y+24, r24	; 0x18
     8d2:	88 8d       	ldd	r24, Y+24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8d4:	99 8d       	ldd	r25, Y+25	; 0x19
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <wiinunchuck_init+0x13a>
     8da:	99 8f       	std	Y+25, r25	; 0x19
     8dc:	88 8f       	std	Y+24, r24	; 0x18
     8de:	8e 89       	ldd	r24, Y+22	; 0x16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e0:	9f 89       	ldd	r25, Y+23	; 0x17
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	9f 8b       	std	Y+23, r25	; 0x17
     8e6:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e8:	8e 89       	ldd	r24, Y+22	; 0x16
     8ea:	9f 89       	ldd	r25, Y+23	; 0x17
     8ec:	89 2b       	or	r24, r25
     8ee:	69 f7       	brne	.-38     	; 0x8ca <wiinunchuck_init+0x12e>
     8f0:	3b c0       	rjmp	.+118    	; 0x968 <wiinunchuck_init+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f2:	6a 89       	ldd	r22, Y+18	; 0x12
     8f4:	7b 89       	ldd	r23, Y+19	; 0x13
     8f6:	8c 89       	ldd	r24, Y+20	; 0x14
     8f8:	9d 89       	ldd	r25, Y+21	; 0x15
     8fa:	3d d2       	rcall	.+1146   	; 0xd76 <__fixunssfsi>
     8fc:	dc 01       	movw	r26, r24
     8fe:	cb 01       	movw	r24, r22
     900:	9f 8b       	std	Y+23, r25	; 0x17
     902:	8e 8b       	std	Y+22, r24	; 0x16
     904:	8e 89       	ldd	r24, Y+22	; 0x16
     906:	9f 89       	ldd	r25, Y+23	; 0x17
     908:	9b 8f       	std	Y+27, r25	; 0x1b
     90a:	8a 8f       	std	Y+26, r24	; 0x1a
     90c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     90e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <wiinunchuck_init+0x174>
     914:	9b 8f       	std	Y+27, r25	; 0x1b
     916:	8a 8f       	std	Y+26, r24	; 0x1a
     918:	27 c0       	rjmp	.+78     	; 0x968 <wiinunchuck_init+0x1cc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	4f e7       	ldi	r20, 0x7F	; 127
     920:	53 e4       	ldi	r21, 0x43	; 67
     922:	6d 81       	ldd	r22, Y+5	; 0x05
     924:	7e 81       	ldd	r23, Y+6	; 0x06
     926:	8f 81       	ldd	r24, Y+7	; 0x07
     928:	98 85       	ldd	r25, Y+8	; 0x08
     92a:	c6 d2       	rcall	.+1420   	; 0xeb8 <__gesf2>
     92c:	18 16       	cp	r1, r24
     92e:	a4 f4       	brge	.+40     	; 0x958 <wiinunchuck_init+0x1bc>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     930:	69 85       	ldd	r22, Y+9	; 0x09
     932:	7a 85       	ldd	r23, Y+10	; 0x0a
     934:	8b 85       	ldd	r24, Y+11	; 0x0b
     936:	9c 85       	ldd	r25, Y+12	; 0x0c
     938:	1e d2       	rcall	.+1084   	; 0xd76 <__fixunssfsi>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	9d 8f       	std	Y+29, r25	; 0x1d
     940:	8c 8f       	std	Y+28, r24	; 0x1c
     942:	8c 8d       	ldd	r24, Y+28	; 0x1c
     944:	9d 8d       	ldd	r25, Y+29	; 0x1d
     946:	9f 8f       	std	Y+31, r25	; 0x1f
     948:	8e 8f       	std	Y+30, r24	; 0x1e
     94a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     94c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <wiinunchuck_init+0x1b2>
     952:	9f 8f       	std	Y+31, r25	; 0x1f
     954:	8e 8f       	std	Y+30, r24	; 0x1e
     956:	0e c0       	rjmp	.+28     	; 0x974 <wiinunchuck_init+0x1d8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     958:	6d 81       	ldd	r22, Y+5	; 0x05
     95a:	7e 81       	ldd	r23, Y+6	; 0x06
     95c:	8f 81       	ldd	r24, Y+7	; 0x07
     95e:	98 85       	ldd	r25, Y+8	; 0x08
     960:	0a d2       	rcall	.+1044   	; 0xd76 <__fixunssfsi>
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     966:	8d 87       	std	Y+13, r24	; 0x0d
     968:	8d 85       	ldd	r24, Y+13	; 0x0d
	#endif

	//standard init: 0x40 -> 0x00
	//alternative init: 0xF0 -> 0x55 followed by 0xFB -> 0x00, lets us use 3rd party nunchucks
	//no longer need to decode bytes in _nunchuk_decode_byte
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_WRITE);
     96a:	88 a3       	std	Y+32, r24	; 0x20
     96c:	88 a1       	ldd	r24, Y+32	; 0x20
     96e:	8a 95       	dec	r24
	i2c_write(0xF0);
     970:	f1 f7       	brne	.-4      	; 0x96e <wiinunchuck_init+0x1d2>
     972:	88 a3       	std	Y+32, r24	; 0x20
     974:	84 ea       	ldi	r24, 0xA4	; 164
	i2c_write(0x55);
     976:	61 dc       	rcall	.-1854   	; 0x23a <i2c_start_wait>
     978:	80 ef       	ldi	r24, 0xF0	; 240
     97a:	cc dc       	rcall	.-1640   	; 0x314 <i2c_write>
	i2c_stop();
     97c:	85 e5       	ldi	r24, 0x55	; 85
     97e:	ca dc       	rcall	.-1644   	; 0x314 <i2c_write>
	i2c_start_wait(WIINUNCHUCK_ADDR | I2C_WRITE);
     980:	b1 dc       	rcall	.-1694   	; 0x2e4 <i2c_stop>
     982:	84 ea       	ldi	r24, 0xA4	; 164
     984:	5a dc       	rcall	.-1868   	; 0x23a <i2c_start_wait>
	i2c_write(0xFB);
     986:	8b ef       	ldi	r24, 0xFB	; 251
     988:	c5 dc       	rcall	.-1654   	; 0x314 <i2c_write>
     98a:	80 e0       	ldi	r24, 0x00	; 0
	i2c_write(0x00);
     98c:	c3 dc       	rcall	.-1658   	; 0x314 <i2c_write>
     98e:	aa dc       	rcall	.-1708   	; 0x2e4 <i2c_stop>
     990:	41 de       	rcall	.-894    	; 0x614 <wiinunchuck_update>
	i2c_stop();
     992:	00 00       	nop
     994:	a0 96       	adiw	r28, 0x20	; 32
	//update
	wiinunchuck_update();
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
}
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <main>:
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
	0xAF,0x2A,0x20,0xA5,0x34,0xB1,0xBB,0x3E,0x1C,0x99,
	0x93,0x16,0x87,0x02,0x08,0x8D
};
#endif

int main(void) {
     9ae:	ed 97       	sbiw	r28, 0x3d	; 61
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
	#if DEBUG_ENABLED == 1
	char printbuff[100];
	#endif

	//init usart
	initUSART();
     9ba:	f9 db       	rcall	.-2062   	; 0x1ae <initUSART>

	//init wiinunchuck
	wiinunchuck_init();
     9bc:	ef de       	rcall	.-546    	; 0x79c <wiinunchuck_init>
		int angleX;
		int angleY;
		int angleZ;

		//update data
		wiinunchuck_update();
     9be:	78 94       	sei

		//get data
		buttonZ = wiinunchuck_getbuttonZ();
     9c0:	29 de       	rcall	.-942    	; 0x614 <wiinunchuck_update>
     9c2:	78 dd       	rcall	.-1296   	; 0x4b4 <wiinunchuck_getbuttonZ>
		buttonC = wiinunchuck_getbuttonC();
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	7f dd       	rcall	.-1282   	; 0x4c6 <wiinunchuck_getbuttonC>
		joyX = wiinunchuck_getjoyX();
     9c8:	8a 83       	std	Y+2, r24	; 0x02
     9ca:	fa dc       	rcall	.-1548   	; 0x3c0 <wiinunchuck_getjoyX>
     9cc:	9c 83       	std	Y+4, r25	; 0x04
		joyY = wiinunchuck_getjoyY();
     9ce:	8b 83       	std	Y+3, r24	; 0x03
     9d0:	34 dd       	rcall	.-1432   	; 0x43a <wiinunchuck_getjoyY>
     9d2:	9e 83       	std	Y+6, r25	; 0x06
		angleX = wiinunchuck_getangleX();
     9d4:	8d 83       	std	Y+5, r24	; 0x05
     9d6:	80 dd       	rcall	.-1280   	; 0x4d8 <wiinunchuck_getangleX>
     9d8:	98 87       	std	Y+8, r25	; 0x08
     9da:	8f 83       	std	Y+7, r24	; 0x07
		angleY = wiinunchuck_getangleY();
     9dc:	8a dd       	rcall	.-1260   	; 0x4f2 <wiinunchuck_getangleY>
     9de:	9a 87       	std	Y+10, r25	; 0x0a
     9e0:	89 87       	std	Y+9, r24	; 0x09
     9e2:	94 dd       	rcall	.-1240   	; 0x50c <wiinunchuck_getangleZ>
		angleZ = wiinunchuck_getangleZ();
     9e4:	9c 87       	std	Y+12, r25	; 0x0c
     9e6:	8b 87       	std	Y+11, r24	; 0x0b
     9e8:	1d 86       	std	Y+13, r1	; 0x0d
     9ea:	9d 85       	ldd	r25, Y+13	; 0x0d

		_delay_ms(100);
		#else

		#if CRCCHECK_ENABLED == 1
		unsigned char crcc = 0;
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)buttonZ]));
     9ee:	89 27       	eor	r24, r25
     9f0:	88 2f       	mov	r24, r24
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	84 57       	subi	r24, 0x74	; 116
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	9f 87       	std	Y+15, r25	; 0x0f
     9fa:	8e 87       	std	Y+14, r24	; 0x0e
     9fc:	8e 85       	ldd	r24, Y+14	; 0x0e
     9fe:	9f 85       	ldd	r25, Y+15	; 0x0f
     a00:	fc 01       	movw	r30, r24
     a02:	25 91       	lpm	r18, Z+
     a04:	34 91       	lpm	r19, Z
     a06:	cf 01       	movw	r24, r30
     a08:	39 8b       	std	Y+17, r19	; 0x11
     a0a:	28 8b       	std	Y+16, r18	; 0x10
     a0c:	9f 87       	std	Y+15, r25	; 0x0f
     a0e:	8e 87       	std	Y+14, r24	; 0x0e
     a10:	88 89       	ldd	r24, Y+16	; 0x10
     a12:	99 89       	ldd	r25, Y+17	; 0x11
     a14:	8d 87       	std	Y+13, r24	; 0x0d
     a16:	9d 85       	ldd	r25, Y+13	; 0x0d
     a18:	8a 81       	ldd	r24, Y+2	; 0x02
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)buttonC]));
     a1a:	89 27       	eor	r24, r25
     a1c:	88 2f       	mov	r24, r24
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	84 57       	subi	r24, 0x74	; 116
     a22:	9f 4f       	sbci	r25, 0xFF	; 255
     a24:	9b 8b       	std	Y+19, r25	; 0x13
     a26:	8a 8b       	std	Y+18, r24	; 0x12
     a28:	8a 89       	ldd	r24, Y+18	; 0x12
     a2a:	9b 89       	ldd	r25, Y+19	; 0x13
     a2c:	fc 01       	movw	r30, r24
     a2e:	25 91       	lpm	r18, Z+
     a30:	34 91       	lpm	r19, Z
     a32:	cf 01       	movw	r24, r30
     a34:	3d 8b       	std	Y+21, r19	; 0x15
     a36:	2c 8b       	std	Y+20, r18	; 0x14
     a38:	9b 8b       	std	Y+19, r25	; 0x13
     a3a:	8a 8b       	std	Y+18, r24	; 0x12
     a3c:	8c 89       	ldd	r24, Y+20	; 0x14
     a3e:	9d 89       	ldd	r25, Y+21	; 0x15
     a40:	8d 87       	std	Y+13, r24	; 0x0d
     a42:	8d 85       	ldd	r24, Y+13	; 0x0d
     a44:	28 2f       	mov	r18, r24
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)(joyX)]));
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	8b 81       	ldd	r24, Y+3	; 0x03
     a4a:	9c 81       	ldd	r25, Y+4	; 0x04
     a4c:	99 27       	eor	r25, r25
     a4e:	82 27       	eor	r24, r18
     a50:	93 27       	eor	r25, r19
     a52:	84 57       	subi	r24, 0x74	; 116
     a54:	9f 4f       	sbci	r25, 0xFF	; 255
     a56:	9f 8b       	std	Y+23, r25	; 0x17
     a58:	8e 8b       	std	Y+22, r24	; 0x16
     a5a:	8e 89       	ldd	r24, Y+22	; 0x16
     a5c:	9f 89       	ldd	r25, Y+23	; 0x17
     a5e:	fc 01       	movw	r30, r24
     a60:	25 91       	lpm	r18, Z+
     a62:	34 91       	lpm	r19, Z
     a64:	cf 01       	movw	r24, r30
     a66:	39 8f       	std	Y+25, r19	; 0x19
     a68:	28 8f       	std	Y+24, r18	; 0x18
     a6a:	9f 8b       	std	Y+23, r25	; 0x17
     a6c:	8e 8b       	std	Y+22, r24	; 0x16
     a6e:	88 8d       	ldd	r24, Y+24	; 0x18
     a70:	99 8d       	ldd	r25, Y+25	; 0x19
     a72:	8d 87       	std	Y+13, r24	; 0x0d
     a74:	8d 85       	ldd	r24, Y+13	; 0x0d
     a76:	88 2f       	mov	r24, r24
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)(joyX>>8)]));
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	2b 81       	ldd	r18, Y+3	; 0x03
     a7c:	3c 81       	ldd	r19, Y+4	; 0x04
     a7e:	23 2f       	mov	r18, r19
     a80:	33 27       	eor	r19, r19
     a82:	82 27       	eor	r24, r18
     a84:	93 27       	eor	r25, r19
     a86:	84 57       	subi	r24, 0x74	; 116
     a88:	9f 4f       	sbci	r25, 0xFF	; 255
     a8a:	9b 8f       	std	Y+27, r25	; 0x1b
     a8c:	8a 8f       	std	Y+26, r24	; 0x1a
     a8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a90:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a92:	fc 01       	movw	r30, r24
     a94:	25 91       	lpm	r18, Z+
     a96:	34 91       	lpm	r19, Z
     a98:	cf 01       	movw	r24, r30
     a9a:	3d 8f       	std	Y+29, r19	; 0x1d
     a9c:	2c 8f       	std	Y+28, r18	; 0x1c
     a9e:	9b 8f       	std	Y+27, r25	; 0x1b
     aa0:	8a 8f       	std	Y+26, r24	; 0x1a
     aa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     aa4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     aa6:	8d 87       	std	Y+13, r24	; 0x0d
     aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
     aaa:	28 2f       	mov	r18, r24
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)(joyY)]));
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	8d 81       	ldd	r24, Y+5	; 0x05
     ab0:	9e 81       	ldd	r25, Y+6	; 0x06
     ab2:	99 27       	eor	r25, r25
     ab4:	82 27       	eor	r24, r18
     ab6:	93 27       	eor	r25, r19
     ab8:	84 57       	subi	r24, 0x74	; 116
     aba:	9f 4f       	sbci	r25, 0xFF	; 255
     abc:	9f 8f       	std	Y+31, r25	; 0x1f
     abe:	8e 8f       	std	Y+30, r24	; 0x1e
     ac0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ac2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ac4:	fc 01       	movw	r30, r24
     ac6:	25 91       	lpm	r18, Z+
     ac8:	34 91       	lpm	r19, Z
     aca:	cf 01       	movw	r24, r30
     acc:	39 a3       	std	Y+33, r19	; 0x21
     ace:	28 a3       	std	Y+32, r18	; 0x20
     ad0:	9f 8f       	std	Y+31, r25	; 0x1f
     ad2:	8e 8f       	std	Y+30, r24	; 0x1e
     ad4:	88 a1       	ldd	r24, Y+32	; 0x20
     ad6:	99 a1       	ldd	r25, Y+33	; 0x21
     ad8:	8d 87       	std	Y+13, r24	; 0x0d
     ada:	8d 85       	ldd	r24, Y+13	; 0x0d
     adc:	88 2f       	mov	r24, r24
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)(joyY>>8)]));
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	2d 81       	ldd	r18, Y+5	; 0x05
     ae2:	3e 81       	ldd	r19, Y+6	; 0x06
     ae4:	23 2f       	mov	r18, r19
     ae6:	33 27       	eor	r19, r19
     ae8:	82 27       	eor	r24, r18
     aea:	93 27       	eor	r25, r19
     aec:	84 57       	subi	r24, 0x74	; 116
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	9b a3       	std	Y+35, r25	; 0x23
     af2:	8a a3       	std	Y+34, r24	; 0x22
     af4:	8a a1       	ldd	r24, Y+34	; 0x22
     af6:	9b a1       	ldd	r25, Y+35	; 0x23
     af8:	fc 01       	movw	r30, r24
     afa:	25 91       	lpm	r18, Z+
     afc:	34 91       	lpm	r19, Z
     afe:	cf 01       	movw	r24, r30
     b00:	3d a3       	std	Y+37, r19	; 0x25
     b02:	2c a3       	std	Y+36, r18	; 0x24
     b04:	9b a3       	std	Y+35, r25	; 0x23
     b06:	8a a3       	std	Y+34, r24	; 0x22
     b08:	8c a1       	ldd	r24, Y+36	; 0x24
     b0a:	9d a1       	ldd	r25, Y+37	; 0x25
     b0c:	8d 87       	std	Y+13, r24	; 0x0d
     b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b10:	28 2f       	mov	r18, r24
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)(angleX)]));
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	8f 81       	ldd	r24, Y+7	; 0x07
     b16:	98 85       	ldd	r25, Y+8	; 0x08
     b18:	99 27       	eor	r25, r25
     b1a:	82 27       	eor	r24, r18
     b1c:	93 27       	eor	r25, r19
     b1e:	84 57       	subi	r24, 0x74	; 116
     b20:	9f 4f       	sbci	r25, 0xFF	; 255
     b22:	9f a3       	std	Y+39, r25	; 0x27
     b24:	8e a3       	std	Y+38, r24	; 0x26
     b26:	8e a1       	ldd	r24, Y+38	; 0x26
     b28:	9f a1       	ldd	r25, Y+39	; 0x27
     b2a:	fc 01       	movw	r30, r24
     b2c:	25 91       	lpm	r18, Z+
     b2e:	34 91       	lpm	r19, Z
     b30:	cf 01       	movw	r24, r30
     b32:	39 a7       	std	Y+41, r19	; 0x29
     b34:	28 a7       	std	Y+40, r18	; 0x28
     b36:	9f a3       	std	Y+39, r25	; 0x27
     b38:	8e a3       	std	Y+38, r24	; 0x26
     b3a:	88 a5       	ldd	r24, Y+40	; 0x28
     b3c:	99 a5       	ldd	r25, Y+41	; 0x29
     b3e:	8d 87       	std	Y+13, r24	; 0x0d
     b40:	8d 85       	ldd	r24, Y+13	; 0x0d
     b42:	88 2f       	mov	r24, r24
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)(angleX>>8)]));
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	2f 81       	ldd	r18, Y+7	; 0x07
     b48:	38 85       	ldd	r19, Y+8	; 0x08
     b4a:	23 2f       	mov	r18, r19
     b4c:	33 27       	eor	r19, r19
     b4e:	82 27       	eor	r24, r18
     b50:	93 27       	eor	r25, r19
     b52:	84 57       	subi	r24, 0x74	; 116
     b54:	9f 4f       	sbci	r25, 0xFF	; 255
     b56:	9b a7       	std	Y+43, r25	; 0x2b
     b58:	8a a7       	std	Y+42, r24	; 0x2a
     b5a:	8a a5       	ldd	r24, Y+42	; 0x2a
     b5c:	9b a5       	ldd	r25, Y+43	; 0x2b
     b5e:	fc 01       	movw	r30, r24
     b60:	25 91       	lpm	r18, Z+
     b62:	34 91       	lpm	r19, Z
     b64:	cf 01       	movw	r24, r30
     b66:	3d a7       	std	Y+45, r19	; 0x2d
     b68:	2c a7       	std	Y+44, r18	; 0x2c
     b6a:	9b a7       	std	Y+43, r25	; 0x2b
     b6c:	8a a7       	std	Y+42, r24	; 0x2a
     b6e:	8c a5       	ldd	r24, Y+44	; 0x2c
     b70:	9d a5       	ldd	r25, Y+45	; 0x2d
     b72:	8d 87       	std	Y+13, r24	; 0x0d
     b74:	8d 85       	ldd	r24, Y+13	; 0x0d
     b76:	28 2f       	mov	r18, r24
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)(angleY)]));
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	89 85       	ldd	r24, Y+9	; 0x09
     b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b7e:	99 27       	eor	r25, r25
     b80:	82 27       	eor	r24, r18
     b82:	93 27       	eor	r25, r19
     b84:	84 57       	subi	r24, 0x74	; 116
     b86:	9f 4f       	sbci	r25, 0xFF	; 255
     b88:	9f a7       	std	Y+47, r25	; 0x2f
     b8a:	8e a7       	std	Y+46, r24	; 0x2e
     b8c:	8e a5       	ldd	r24, Y+46	; 0x2e
     b8e:	9f a5       	ldd	r25, Y+47	; 0x2f
     b90:	fc 01       	movw	r30, r24
     b92:	25 91       	lpm	r18, Z+
     b94:	34 91       	lpm	r19, Z
     b96:	cf 01       	movw	r24, r30
     b98:	39 ab       	std	Y+49, r19	; 0x31
     b9a:	28 ab       	std	Y+48, r18	; 0x30
     b9c:	9f a7       	std	Y+47, r25	; 0x2f
     b9e:	8e a7       	std	Y+46, r24	; 0x2e
     ba0:	88 a9       	ldd	r24, Y+48	; 0x30
     ba2:	99 a9       	ldd	r25, Y+49	; 0x31
     ba4:	8d 87       	std	Y+13, r24	; 0x0d
     ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba8:	88 2f       	mov	r24, r24
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)(angleY>>8)]));
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	29 85       	ldd	r18, Y+9	; 0x09
     bae:	3a 85       	ldd	r19, Y+10	; 0x0a
     bb0:	23 2f       	mov	r18, r19
     bb2:	33 27       	eor	r19, r19
     bb4:	82 27       	eor	r24, r18
     bb6:	93 27       	eor	r25, r19
     bb8:	84 57       	subi	r24, 0x74	; 116
     bba:	9f 4f       	sbci	r25, 0xFF	; 255
     bbc:	9b ab       	std	Y+51, r25	; 0x33
     bbe:	8a ab       	std	Y+50, r24	; 0x32
     bc0:	8a a9       	ldd	r24, Y+50	; 0x32
     bc2:	9b a9       	ldd	r25, Y+51	; 0x33
     bc4:	fc 01       	movw	r30, r24
     bc6:	25 91       	lpm	r18, Z+
     bc8:	34 91       	lpm	r19, Z
     bca:	cf 01       	movw	r24, r30
     bcc:	3d ab       	std	Y+53, r19	; 0x35
     bce:	2c ab       	std	Y+52, r18	; 0x34
     bd0:	9b ab       	std	Y+51, r25	; 0x33
     bd2:	8a ab       	std	Y+50, r24	; 0x32
     bd4:	8c a9       	ldd	r24, Y+52	; 0x34
     bd6:	9d a9       	ldd	r25, Y+53	; 0x35
     bd8:	8d 87       	std	Y+13, r24	; 0x0d
     bda:	8d 85       	ldd	r24, Y+13	; 0x0d
     bdc:	28 2f       	mov	r18, r24
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)(angleZ)]));
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	8b 85       	ldd	r24, Y+11	; 0x0b
     be2:	9c 85       	ldd	r25, Y+12	; 0x0c
     be4:	99 27       	eor	r25, r25
     be6:	82 27       	eor	r24, r18
     be8:	93 27       	eor	r25, r19
     bea:	84 57       	subi	r24, 0x74	; 116
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	9f ab       	std	Y+55, r25	; 0x37
     bf0:	8e ab       	std	Y+54, r24	; 0x36
     bf2:	8e a9       	ldd	r24, Y+54	; 0x36
     bf4:	9f a9       	ldd	r25, Y+55	; 0x37
     bf6:	fc 01       	movw	r30, r24
     bf8:	25 91       	lpm	r18, Z+
     bfa:	34 91       	lpm	r19, Z
     bfc:	cf 01       	movw	r24, r30
     bfe:	39 af       	std	Y+57, r19	; 0x39
     c00:	28 af       	std	Y+56, r18	; 0x38
     c02:	9f ab       	std	Y+55, r25	; 0x37
     c04:	8e ab       	std	Y+54, r24	; 0x36
     c06:	88 ad       	ldd	r24, Y+56	; 0x38
     c08:	99 ad       	ldd	r25, Y+57	; 0x39
     c0a:	8d 87       	std	Y+13, r24	; 0x0d
     c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0e:	88 2f       	mov	r24, r24
		crcc = pgm_read_word(&(crc8table[crcc ^ (unsigned char)(angleZ>>8)]));
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	2b 85       	ldd	r18, Y+11	; 0x0b
     c14:	3c 85       	ldd	r19, Y+12	; 0x0c
     c16:	23 2f       	mov	r18, r19
     c18:	33 27       	eor	r19, r19
     c1a:	82 27       	eor	r24, r18
     c1c:	93 27       	eor	r25, r19
     c1e:	84 57       	subi	r24, 0x74	; 116
     c20:	9f 4f       	sbci	r25, 0xFF	; 255
     c22:	9b af       	std	Y+59, r25	; 0x3b
     c24:	8a af       	std	Y+58, r24	; 0x3a
     c26:	8a ad       	ldd	r24, Y+58	; 0x3a
     c28:	9b ad       	ldd	r25, Y+59	; 0x3b
     c2a:	fc 01       	movw	r30, r24
     c2c:	25 91       	lpm	r18, Z+
     c2e:	34 91       	lpm	r19, Z
     c30:	cf 01       	movw	r24, r30
     c32:	3d af       	std	Y+61, r19	; 0x3d
     c34:	2c af       	std	Y+60, r18	; 0x3c
     c36:	9b af       	std	Y+59, r25	; 0x3b
     c38:	8a af       	std	Y+58, r24	; 0x3a
     c3a:	8c ad       	ldd	r24, Y+60	; 0x3c
     c3c:	9d ad       	ldd	r25, Y+61	; 0x3d
		#endif

		USART_Send(buttonZ);
     c3e:	8d 87       	std	Y+13, r24	; 0x0d
     c40:	89 81       	ldd	r24, Y+1	; 0x01
		USART_Send(buttonC);
     c42:	cf da       	rcall	.-2658   	; 0x1e2 <USART_Send>
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
		USART_Send(joyX);
     c46:	cd da       	rcall	.-2662   	; 0x1e2 <USART_Send>
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	cb da       	rcall	.-2666   	; 0x1e2 <USART_Send>
		USART_Send(joyX>>8);
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	9c 81       	ldd	r25, Y+4	; 0x04
     c50:	89 2f       	mov	r24, r25
     c52:	99 0f       	add	r25, r25
     c54:	99 0b       	sbc	r25, r25
		USART_Send(joyY);
     c56:	c5 da       	rcall	.-2678   	; 0x1e2 <USART_Send>
     c58:	8d 81       	ldd	r24, Y+5	; 0x05
		USART_Send(joyY>>8);
     c5a:	c3 da       	rcall	.-2682   	; 0x1e2 <USART_Send>
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	89 2f       	mov	r24, r25
     c62:	99 0f       	add	r25, r25
     c64:	99 0b       	sbc	r25, r25
		USART_Send(angleX);
     c66:	bd da       	rcall	.-2694   	; 0x1e2 <USART_Send>
     c68:	8f 81       	ldd	r24, Y+7	; 0x07
		USART_Send(angleX>>8);
     c6a:	bb da       	rcall	.-2698   	; 0x1e2 <USART_Send>
     c6c:	8f 81       	ldd	r24, Y+7	; 0x07
     c6e:	98 85       	ldd	r25, Y+8	; 0x08
     c70:	89 2f       	mov	r24, r25
     c72:	99 0f       	add	r25, r25
     c74:	99 0b       	sbc	r25, r25
		USART_Send(angleY);
     c76:	b5 da       	rcall	.-2710   	; 0x1e2 <USART_Send>
     c78:	89 85       	ldd	r24, Y+9	; 0x09
     c7a:	b3 da       	rcall	.-2714   	; 0x1e2 <USART_Send>
		USART_Send(angleY>>8);
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c80:	89 2f       	mov	r24, r25
     c82:	99 0f       	add	r25, r25
     c84:	99 0b       	sbc	r25, r25
     c86:	ad da       	rcall	.-2726   	; 0x1e2 <USART_Send>
     c88:	8b 85       	ldd	r24, Y+11	; 0x0b
		USART_Send(angleZ);
     c8a:	ab da       	rcall	.-2730   	; 0x1e2 <USART_Send>
     c8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c8e:	9c 85       	ldd	r25, Y+12	; 0x0c
		USART_Send(angleZ>>8);
     c90:	89 2f       	mov	r24, r25
     c92:	99 0f       	add	r25, r25
     c94:	99 0b       	sbc	r25, r25
     c96:	a5 da       	rcall	.-2742   	; 0x1e2 <USART_Send>
     c98:	8d 85       	ldd	r24, Y+13	; 0x0d
     c9a:	a3 da       	rcall	.-2746   	; 0x1e2 <USART_Send>
     c9c:	91 ce       	rjmp	.-734    	; 0x9c0 <main+0x1a>

00000c9e <__cmpsf2>:

		#if CRCCHECK_ENABLED == 1
		USART_Send(crcc);
     c9e:	97 d0       	rcall	.+302    	; 0xdce <__fp_cmp>
     ca0:	08 f4       	brcc	.+2      	; 0xca4 <__cmpsf2+0x6>
     ca2:	81 e0       	ldi	r24, 0x01	; 1
		#endif

		//usart_putc('\n');

		#endif
	}
     ca4:	08 95       	ret

00000ca6 <__divsf3>:
     ca6:	0c d0       	rcall	.+24     	; 0xcc0 <__divsf3x>
     ca8:	cd c0       	rjmp	.+410    	; 0xe44 <__fp_round>
     caa:	c5 d0       	rcall	.+394    	; 0xe36 <__fp_pscB>
     cac:	40 f0       	brcs	.+16     	; 0xcbe <__divsf3+0x18>
     cae:	bc d0       	rcall	.+376    	; 0xe28 <__fp_pscA>
     cb0:	30 f0       	brcs	.+12     	; 0xcbe <__divsf3+0x18>
     cb2:	21 f4       	brne	.+8      	; 0xcbc <__divsf3+0x16>
     cb4:	5f 3f       	cpi	r21, 0xFF	; 255
     cb6:	19 f0       	breq	.+6      	; 0xcbe <__divsf3+0x18>
     cb8:	ae c0       	rjmp	.+348    	; 0xe16 <__fp_inf>
     cba:	51 11       	cpse	r21, r1
     cbc:	f7 c0       	rjmp	.+494    	; 0xeac <__fp_szero>
     cbe:	b1 c0       	rjmp	.+354    	; 0xe22 <__fp_nan>

00000cc0 <__divsf3x>:
     cc0:	d2 d0       	rcall	.+420    	; 0xe66 <__fp_split3>
     cc2:	98 f3       	brcs	.-26     	; 0xcaa <__divsf3+0x4>

00000cc4 <__divsf3_pse>:
     cc4:	99 23       	and	r25, r25
     cc6:	c9 f3       	breq	.-14     	; 0xcba <__divsf3+0x14>
     cc8:	55 23       	and	r21, r21
     cca:	b1 f3       	breq	.-20     	; 0xcb8 <__divsf3+0x12>
     ccc:	95 1b       	sub	r25, r21
     cce:	55 0b       	sbc	r21, r21
     cd0:	bb 27       	eor	r27, r27
     cd2:	aa 27       	eor	r26, r26
     cd4:	62 17       	cp	r22, r18
     cd6:	73 07       	cpc	r23, r19
     cd8:	84 07       	cpc	r24, r20
     cda:	38 f0       	brcs	.+14     	; 0xcea <__divsf3_pse+0x26>
     cdc:	9f 5f       	subi	r25, 0xFF	; 255
     cde:	5f 4f       	sbci	r21, 0xFF	; 255
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	aa 1f       	adc	r26, r26
     ce8:	a9 f3       	breq	.-22     	; 0xcd4 <__divsf3_pse+0x10>
     cea:	33 d0       	rcall	.+102    	; 0xd52 <__divsf3_pse+0x8e>
     cec:	0e 2e       	mov	r0, r30
     cee:	3a f0       	brmi	.+14     	; 0xcfe <__divsf3_pse+0x3a>
     cf0:	e0 e8       	ldi	r30, 0x80	; 128
     cf2:	30 d0       	rcall	.+96     	; 0xd54 <__divsf3_pse+0x90>
     cf4:	91 50       	subi	r25, 0x01	; 1
     cf6:	50 40       	sbci	r21, 0x00	; 0
     cf8:	e6 95       	lsr	r30
     cfa:	00 1c       	adc	r0, r0
     cfc:	ca f7       	brpl	.-14     	; 0xcf0 <__divsf3_pse+0x2c>
     cfe:	29 d0       	rcall	.+82     	; 0xd52 <__divsf3_pse+0x8e>
     d00:	fe 2f       	mov	r31, r30
     d02:	27 d0       	rcall	.+78     	; 0xd52 <__divsf3_pse+0x8e>
     d04:	66 0f       	add	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	88 1f       	adc	r24, r24
     d0a:	bb 1f       	adc	r27, r27
     d0c:	26 17       	cp	r18, r22
     d0e:	37 07       	cpc	r19, r23
     d10:	48 07       	cpc	r20, r24
     d12:	ab 07       	cpc	r26, r27
     d14:	b0 e8       	ldi	r27, 0x80	; 128
     d16:	09 f0       	breq	.+2      	; 0xd1a <__divsf3_pse+0x56>
     d18:	bb 0b       	sbc	r27, r27
     d1a:	80 2d       	mov	r24, r0
     d1c:	bf 01       	movw	r22, r30
     d1e:	ff 27       	eor	r31, r31
     d20:	93 58       	subi	r25, 0x83	; 131
     d22:	5f 4f       	sbci	r21, 0xFF	; 255
     d24:	2a f0       	brmi	.+10     	; 0xd30 <__divsf3_pse+0x6c>
     d26:	9e 3f       	cpi	r25, 0xFE	; 254
     d28:	51 05       	cpc	r21, r1
     d2a:	68 f0       	brcs	.+26     	; 0xd46 <__divsf3_pse+0x82>
     d2c:	74 c0       	rjmp	.+232    	; 0xe16 <__fp_inf>
     d2e:	be c0       	rjmp	.+380    	; 0xeac <__fp_szero>
     d30:	5f 3f       	cpi	r21, 0xFF	; 255
     d32:	ec f3       	brlt	.-6      	; 0xd2e <__divsf3_pse+0x6a>
     d34:	98 3e       	cpi	r25, 0xE8	; 232
     d36:	dc f3       	brlt	.-10     	; 0xd2e <__divsf3_pse+0x6a>
     d38:	86 95       	lsr	r24
     d3a:	77 95       	ror	r23
     d3c:	67 95       	ror	r22
     d3e:	b7 95       	ror	r27
     d40:	f7 95       	ror	r31
     d42:	9f 5f       	subi	r25, 0xFF	; 255
     d44:	c9 f7       	brne	.-14     	; 0xd38 <__divsf3_pse+0x74>
     d46:	88 0f       	add	r24, r24
     d48:	91 1d       	adc	r25, r1
     d4a:	96 95       	lsr	r25
     d4c:	87 95       	ror	r24
     d4e:	97 f9       	bld	r25, 7
     d50:	08 95       	ret
     d52:	e1 e0       	ldi	r30, 0x01	; 1
     d54:	66 0f       	add	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	88 1f       	adc	r24, r24
     d5a:	bb 1f       	adc	r27, r27
     d5c:	62 17       	cp	r22, r18
     d5e:	73 07       	cpc	r23, r19
     d60:	84 07       	cpc	r24, r20
     d62:	ba 07       	cpc	r27, r26
     d64:	20 f0       	brcs	.+8      	; 0xd6e <__divsf3_pse+0xaa>
     d66:	62 1b       	sub	r22, r18
     d68:	73 0b       	sbc	r23, r19
     d6a:	84 0b       	sbc	r24, r20
     d6c:	ba 0b       	sbc	r27, r26
     d6e:	ee 1f       	adc	r30, r30
     d70:	88 f7       	brcc	.-30     	; 0xd54 <__divsf3_pse+0x90>
     d72:	e0 95       	com	r30
     d74:	08 95       	ret

00000d76 <__fixunssfsi>:
     d76:	7f d0       	rcall	.+254    	; 0xe76 <__fp_splitA>
     d78:	88 f0       	brcs	.+34     	; 0xd9c <__fixunssfsi+0x26>
     d7a:	9f 57       	subi	r25, 0x7F	; 127
     d7c:	90 f0       	brcs	.+36     	; 0xda2 <__fixunssfsi+0x2c>
     d7e:	b9 2f       	mov	r27, r25
     d80:	99 27       	eor	r25, r25
     d82:	b7 51       	subi	r27, 0x17	; 23
     d84:	a0 f0       	brcs	.+40     	; 0xdae <__fixunssfsi+0x38>
     d86:	d1 f0       	breq	.+52     	; 0xdbc <__fixunssfsi+0x46>
     d88:	66 0f       	add	r22, r22
     d8a:	77 1f       	adc	r23, r23
     d8c:	88 1f       	adc	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	1a f0       	brmi	.+6      	; 0xd98 <__fixunssfsi+0x22>
     d92:	ba 95       	dec	r27
     d94:	c9 f7       	brne	.-14     	; 0xd88 <__fixunssfsi+0x12>
     d96:	12 c0       	rjmp	.+36     	; 0xdbc <__fixunssfsi+0x46>
     d98:	b1 30       	cpi	r27, 0x01	; 1
     d9a:	81 f0       	breq	.+32     	; 0xdbc <__fixunssfsi+0x46>
     d9c:	86 d0       	rcall	.+268    	; 0xeaa <__fp_zero>
     d9e:	b1 e0       	ldi	r27, 0x01	; 1
     da0:	08 95       	ret
     da2:	83 c0       	rjmp	.+262    	; 0xeaa <__fp_zero>
     da4:	67 2f       	mov	r22, r23
     da6:	78 2f       	mov	r23, r24
     da8:	88 27       	eor	r24, r24
     daa:	b8 5f       	subi	r27, 0xF8	; 248
     dac:	39 f0       	breq	.+14     	; 0xdbc <__fixunssfsi+0x46>
     dae:	b9 3f       	cpi	r27, 0xF9	; 249
     db0:	cc f3       	brlt	.-14     	; 0xda4 <__fixunssfsi+0x2e>
     db2:	86 95       	lsr	r24
     db4:	77 95       	ror	r23
     db6:	67 95       	ror	r22
     db8:	b3 95       	inc	r27
     dba:	d9 f7       	brne	.-10     	; 0xdb2 <__fixunssfsi+0x3c>
     dbc:	3e f4       	brtc	.+14     	; 0xdcc <__fixunssfsi+0x56>
     dbe:	90 95       	com	r25
     dc0:	80 95       	com	r24
     dc2:	70 95       	com	r23
     dc4:	61 95       	neg	r22
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	8f 4f       	sbci	r24, 0xFF	; 255
     dca:	9f 4f       	sbci	r25, 0xFF	; 255
     dcc:	08 95       	ret

00000dce <__fp_cmp>:
     dce:	99 0f       	add	r25, r25
     dd0:	00 08       	sbc	r0, r0
     dd2:	55 0f       	add	r21, r21
     dd4:	aa 0b       	sbc	r26, r26
     dd6:	e0 e8       	ldi	r30, 0x80	; 128
     dd8:	fe ef       	ldi	r31, 0xFE	; 254
     dda:	16 16       	cp	r1, r22
     ddc:	17 06       	cpc	r1, r23
     dde:	e8 07       	cpc	r30, r24
     de0:	f9 07       	cpc	r31, r25
     de2:	c0 f0       	brcs	.+48     	; 0xe14 <__fp_cmp+0x46>
     de4:	12 16       	cp	r1, r18
     de6:	13 06       	cpc	r1, r19
     de8:	e4 07       	cpc	r30, r20
     dea:	f5 07       	cpc	r31, r21
     dec:	98 f0       	brcs	.+38     	; 0xe14 <__fp_cmp+0x46>
     dee:	62 1b       	sub	r22, r18
     df0:	73 0b       	sbc	r23, r19
     df2:	84 0b       	sbc	r24, r20
     df4:	95 0b       	sbc	r25, r21
     df6:	39 f4       	brne	.+14     	; 0xe06 <__fp_cmp+0x38>
     df8:	0a 26       	eor	r0, r26
     dfa:	61 f0       	breq	.+24     	; 0xe14 <__fp_cmp+0x46>
     dfc:	23 2b       	or	r18, r19
     dfe:	24 2b       	or	r18, r20
     e00:	25 2b       	or	r18, r21
     e02:	21 f4       	brne	.+8      	; 0xe0c <__fp_cmp+0x3e>
     e04:	08 95       	ret
     e06:	0a 26       	eor	r0, r26
     e08:	09 f4       	brne	.+2      	; 0xe0c <__fp_cmp+0x3e>
     e0a:	a1 40       	sbci	r26, 0x01	; 1
     e0c:	a6 95       	lsr	r26
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	81 1d       	adc	r24, r1
     e12:	81 1d       	adc	r24, r1
     e14:	08 95       	ret

00000e16 <__fp_inf>:
     e16:	97 f9       	bld	r25, 7
     e18:	9f 67       	ori	r25, 0x7F	; 127
     e1a:	80 e8       	ldi	r24, 0x80	; 128
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	08 95       	ret

00000e22 <__fp_nan>:
     e22:	9f ef       	ldi	r25, 0xFF	; 255
     e24:	80 ec       	ldi	r24, 0xC0	; 192
     e26:	08 95       	ret

00000e28 <__fp_pscA>:
     e28:	00 24       	eor	r0, r0
     e2a:	0a 94       	dec	r0
     e2c:	16 16       	cp	r1, r22
     e2e:	17 06       	cpc	r1, r23
     e30:	18 06       	cpc	r1, r24
     e32:	09 06       	cpc	r0, r25
     e34:	08 95       	ret

00000e36 <__fp_pscB>:
     e36:	00 24       	eor	r0, r0
     e38:	0a 94       	dec	r0
     e3a:	12 16       	cp	r1, r18
     e3c:	13 06       	cpc	r1, r19
     e3e:	14 06       	cpc	r1, r20
     e40:	05 06       	cpc	r0, r21
     e42:	08 95       	ret

00000e44 <__fp_round>:
     e44:	09 2e       	mov	r0, r25
     e46:	03 94       	inc	r0
     e48:	00 0c       	add	r0, r0
     e4a:	11 f4       	brne	.+4      	; 0xe50 <__fp_round+0xc>
     e4c:	88 23       	and	r24, r24
     e4e:	52 f0       	brmi	.+20     	; 0xe64 <__fp_round+0x20>
     e50:	bb 0f       	add	r27, r27
     e52:	40 f4       	brcc	.+16     	; 0xe64 <__fp_round+0x20>
     e54:	bf 2b       	or	r27, r31
     e56:	11 f4       	brne	.+4      	; 0xe5c <__fp_round+0x18>
     e58:	60 ff       	sbrs	r22, 0
     e5a:	04 c0       	rjmp	.+8      	; 0xe64 <__fp_round+0x20>
     e5c:	6f 5f       	subi	r22, 0xFF	; 255
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	8f 4f       	sbci	r24, 0xFF	; 255
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	08 95       	ret

00000e66 <__fp_split3>:
     e66:	57 fd       	sbrc	r21, 7
     e68:	90 58       	subi	r25, 0x80	; 128
     e6a:	44 0f       	add	r20, r20
     e6c:	55 1f       	adc	r21, r21
     e6e:	59 f0       	breq	.+22     	; 0xe86 <__fp_splitA+0x10>
     e70:	5f 3f       	cpi	r21, 0xFF	; 255
     e72:	71 f0       	breq	.+28     	; 0xe90 <__fp_splitA+0x1a>
     e74:	47 95       	ror	r20

00000e76 <__fp_splitA>:
     e76:	88 0f       	add	r24, r24
     e78:	97 fb       	bst	r25, 7
     e7a:	99 1f       	adc	r25, r25
     e7c:	61 f0       	breq	.+24     	; 0xe96 <__fp_splitA+0x20>
     e7e:	9f 3f       	cpi	r25, 0xFF	; 255
     e80:	79 f0       	breq	.+30     	; 0xea0 <__fp_splitA+0x2a>
     e82:	87 95       	ror	r24
     e84:	08 95       	ret
     e86:	12 16       	cp	r1, r18
     e88:	13 06       	cpc	r1, r19
     e8a:	14 06       	cpc	r1, r20
     e8c:	55 1f       	adc	r21, r21
     e8e:	f2 cf       	rjmp	.-28     	; 0xe74 <__fp_split3+0xe>
     e90:	46 95       	lsr	r20
     e92:	f1 df       	rcall	.-30     	; 0xe76 <__fp_splitA>
     e94:	08 c0       	rjmp	.+16     	; 0xea6 <__fp_splitA+0x30>
     e96:	16 16       	cp	r1, r22
     e98:	17 06       	cpc	r1, r23
     e9a:	18 06       	cpc	r1, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	f1 cf       	rjmp	.-30     	; 0xe82 <__fp_splitA+0xc>
     ea0:	86 95       	lsr	r24
     ea2:	71 05       	cpc	r23, r1
     ea4:	61 05       	cpc	r22, r1
     ea6:	08 94       	sec
     ea8:	08 95       	ret

00000eaa <__fp_zero>:
     eaa:	e8 94       	clt

00000eac <__fp_szero>:
     eac:	bb 27       	eor	r27, r27
     eae:	66 27       	eor	r22, r22
     eb0:	77 27       	eor	r23, r23
     eb2:	cb 01       	movw	r24, r22
     eb4:	97 f9       	bld	r25, 7
     eb6:	08 95       	ret

00000eb8 <__gesf2>:
     eb8:	8a df       	rcall	.-236    	; 0xdce <__fp_cmp>
     eba:	08 f4       	brcc	.+2      	; 0xebe <__gesf2+0x6>
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	08 95       	ret

00000ec0 <__mulsf3>:
     ec0:	0b d0       	rcall	.+22     	; 0xed8 <__mulsf3x>
     ec2:	c0 cf       	rjmp	.-128    	; 0xe44 <__fp_round>
     ec4:	b1 df       	rcall	.-158    	; 0xe28 <__fp_pscA>
     ec6:	28 f0       	brcs	.+10     	; 0xed2 <__mulsf3+0x12>
     ec8:	b6 df       	rcall	.-148    	; 0xe36 <__fp_pscB>
     eca:	18 f0       	brcs	.+6      	; 0xed2 <__mulsf3+0x12>
     ecc:	95 23       	and	r25, r21
     ece:	09 f0       	breq	.+2      	; 0xed2 <__mulsf3+0x12>
     ed0:	a2 cf       	rjmp	.-188    	; 0xe16 <__fp_inf>
     ed2:	a7 cf       	rjmp	.-178    	; 0xe22 <__fp_nan>
     ed4:	11 24       	eor	r1, r1
     ed6:	ea cf       	rjmp	.-44     	; 0xeac <__fp_szero>

00000ed8 <__mulsf3x>:
     ed8:	c6 df       	rcall	.-116    	; 0xe66 <__fp_split3>
     eda:	a0 f3       	brcs	.-24     	; 0xec4 <__mulsf3+0x4>

00000edc <__mulsf3_pse>:
     edc:	95 9f       	mul	r25, r21
     ede:	d1 f3       	breq	.-12     	; 0xed4 <__mulsf3+0x14>
     ee0:	95 0f       	add	r25, r21
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	55 1f       	adc	r21, r21
     ee6:	62 9f       	mul	r22, r18
     ee8:	f0 01       	movw	r30, r0
     eea:	72 9f       	mul	r23, r18
     eec:	bb 27       	eor	r27, r27
     eee:	f0 0d       	add	r31, r0
     ef0:	b1 1d       	adc	r27, r1
     ef2:	63 9f       	mul	r22, r19
     ef4:	aa 27       	eor	r26, r26
     ef6:	f0 0d       	add	r31, r0
     ef8:	b1 1d       	adc	r27, r1
     efa:	aa 1f       	adc	r26, r26
     efc:	64 9f       	mul	r22, r20
     efe:	66 27       	eor	r22, r22
     f00:	b0 0d       	add	r27, r0
     f02:	a1 1d       	adc	r26, r1
     f04:	66 1f       	adc	r22, r22
     f06:	82 9f       	mul	r24, r18
     f08:	22 27       	eor	r18, r18
     f0a:	b0 0d       	add	r27, r0
     f0c:	a1 1d       	adc	r26, r1
     f0e:	62 1f       	adc	r22, r18
     f10:	73 9f       	mul	r23, r19
     f12:	b0 0d       	add	r27, r0
     f14:	a1 1d       	adc	r26, r1
     f16:	62 1f       	adc	r22, r18
     f18:	83 9f       	mul	r24, r19
     f1a:	a0 0d       	add	r26, r0
     f1c:	61 1d       	adc	r22, r1
     f1e:	22 1f       	adc	r18, r18
     f20:	74 9f       	mul	r23, r20
     f22:	33 27       	eor	r19, r19
     f24:	a0 0d       	add	r26, r0
     f26:	61 1d       	adc	r22, r1
     f28:	23 1f       	adc	r18, r19
     f2a:	84 9f       	mul	r24, r20
     f2c:	60 0d       	add	r22, r0
     f2e:	21 1d       	adc	r18, r1
     f30:	82 2f       	mov	r24, r18
     f32:	76 2f       	mov	r23, r22
     f34:	6a 2f       	mov	r22, r26
     f36:	11 24       	eor	r1, r1
     f38:	9f 57       	subi	r25, 0x7F	; 127
     f3a:	50 40       	sbci	r21, 0x00	; 0
     f3c:	8a f0       	brmi	.+34     	; 0xf60 <__mulsf3_pse+0x84>
     f3e:	e1 f0       	breq	.+56     	; 0xf78 <__mulsf3_pse+0x9c>
     f40:	88 23       	and	r24, r24
     f42:	4a f0       	brmi	.+18     	; 0xf56 <__mulsf3_pse+0x7a>
     f44:	ee 0f       	add	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	bb 1f       	adc	r27, r27
     f4a:	66 1f       	adc	r22, r22
     f4c:	77 1f       	adc	r23, r23
     f4e:	88 1f       	adc	r24, r24
     f50:	91 50       	subi	r25, 0x01	; 1
     f52:	50 40       	sbci	r21, 0x00	; 0
     f54:	a9 f7       	brne	.-22     	; 0xf40 <__mulsf3_pse+0x64>
     f56:	9e 3f       	cpi	r25, 0xFE	; 254
     f58:	51 05       	cpc	r21, r1
     f5a:	70 f0       	brcs	.+28     	; 0xf78 <__mulsf3_pse+0x9c>
     f5c:	5c cf       	rjmp	.-328    	; 0xe16 <__fp_inf>
     f5e:	a6 cf       	rjmp	.-180    	; 0xeac <__fp_szero>
     f60:	5f 3f       	cpi	r21, 0xFF	; 255
     f62:	ec f3       	brlt	.-6      	; 0xf5e <__mulsf3_pse+0x82>
     f64:	98 3e       	cpi	r25, 0xE8	; 232
     f66:	dc f3       	brlt	.-10     	; 0xf5e <__mulsf3_pse+0x82>
     f68:	86 95       	lsr	r24
     f6a:	77 95       	ror	r23
     f6c:	67 95       	ror	r22
     f6e:	b7 95       	ror	r27
     f70:	f7 95       	ror	r31
     f72:	e7 95       	ror	r30
     f74:	9f 5f       	subi	r25, 0xFF	; 255
     f76:	c1 f7       	brne	.-16     	; 0xf68 <__mulsf3_pse+0x8c>
     f78:	fe 2b       	or	r31, r30
     f7a:	88 0f       	add	r24, r24
     f7c:	91 1d       	adc	r25, r1
     f7e:	96 95       	lsr	r25
     f80:	87 95       	ror	r24
     f82:	97 f9       	bld	r25, 7
     f84:	08 95       	ret

00000f86 <__divmodhi4>:
     f86:	97 fb       	bst	r25, 7
     f88:	07 2e       	mov	r0, r23
     f8a:	16 f4       	brtc	.+4      	; 0xf90 <__divmodhi4+0xa>
     f8c:	00 94       	com	r0
     f8e:	06 d0       	rcall	.+12     	; 0xf9c <__divmodhi4_neg1>
     f90:	77 fd       	sbrc	r23, 7
     f92:	08 d0       	rcall	.+16     	; 0xfa4 <__divmodhi4_neg2>
     f94:	27 d0       	rcall	.+78     	; 0xfe4 <__udivmodhi4>
     f96:	07 fc       	sbrc	r0, 7
     f98:	05 d0       	rcall	.+10     	; 0xfa4 <__divmodhi4_neg2>
     f9a:	3e f4       	brtc	.+14     	; 0xfaa <__divmodhi4_exit>

00000f9c <__divmodhi4_neg1>:
     f9c:	90 95       	com	r25
     f9e:	81 95       	neg	r24
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	08 95       	ret

00000fa4 <__divmodhi4_neg2>:
     fa4:	70 95       	com	r23
     fa6:	61 95       	neg	r22
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255

00000faa <__divmodhi4_exit>:
     faa:	08 95       	ret

00000fac <__divmodsi4>:
     fac:	05 2e       	mov	r0, r21
     fae:	97 fb       	bst	r25, 7
     fb0:	16 f4       	brtc	.+4      	; 0xfb6 <__divmodsi4+0xa>
     fb2:	00 94       	com	r0
     fb4:	0f d0       	rcall	.+30     	; 0xfd4 <__negsi2>
     fb6:	57 fd       	sbrc	r21, 7
     fb8:	05 d0       	rcall	.+10     	; 0xfc4 <__divmodsi4_neg2>
     fba:	28 d0       	rcall	.+80     	; 0x100c <__udivmodsi4>
     fbc:	07 fc       	sbrc	r0, 7
     fbe:	02 d0       	rcall	.+4      	; 0xfc4 <__divmodsi4_neg2>
     fc0:	46 f4       	brtc	.+16     	; 0xfd2 <__divmodsi4_exit>
     fc2:	08 c0       	rjmp	.+16     	; 0xfd4 <__negsi2>

00000fc4 <__divmodsi4_neg2>:
     fc4:	50 95       	com	r21
     fc6:	40 95       	com	r20
     fc8:	30 95       	com	r19
     fca:	21 95       	neg	r18
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	4f 4f       	sbci	r20, 0xFF	; 255
     fd0:	5f 4f       	sbci	r21, 0xFF	; 255

00000fd2 <__divmodsi4_exit>:
     fd2:	08 95       	ret

00000fd4 <__negsi2>:
     fd4:	90 95       	com	r25
     fd6:	80 95       	com	r24
     fd8:	70 95       	com	r23
     fda:	61 95       	neg	r22
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	8f 4f       	sbci	r24, 0xFF	; 255
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	08 95       	ret

00000fe4 <__udivmodhi4>:
     fe4:	aa 1b       	sub	r26, r26
     fe6:	bb 1b       	sub	r27, r27
     fe8:	51 e1       	ldi	r21, 0x11	; 17
     fea:	07 c0       	rjmp	.+14     	; 0xffa <__udivmodhi4_ep>

00000fec <__udivmodhi4_loop>:
     fec:	aa 1f       	adc	r26, r26
     fee:	bb 1f       	adc	r27, r27
     ff0:	a6 17       	cp	r26, r22
     ff2:	b7 07       	cpc	r27, r23
     ff4:	10 f0       	brcs	.+4      	; 0xffa <__udivmodhi4_ep>
     ff6:	a6 1b       	sub	r26, r22
     ff8:	b7 0b       	sbc	r27, r23

00000ffa <__udivmodhi4_ep>:
     ffa:	88 1f       	adc	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	5a 95       	dec	r21
    1000:	a9 f7       	brne	.-22     	; 0xfec <__udivmodhi4_loop>
    1002:	80 95       	com	r24
    1004:	90 95       	com	r25
    1006:	bc 01       	movw	r22, r24
    1008:	cd 01       	movw	r24, r26
    100a:	08 95       	ret

0000100c <__udivmodsi4>:
    100c:	a1 e2       	ldi	r26, 0x21	; 33
    100e:	1a 2e       	mov	r1, r26
    1010:	aa 1b       	sub	r26, r26
    1012:	bb 1b       	sub	r27, r27
    1014:	fd 01       	movw	r30, r26
    1016:	0d c0       	rjmp	.+26     	; 0x1032 <__udivmodsi4_ep>

00001018 <__udivmodsi4_loop>:
    1018:	aa 1f       	adc	r26, r26
    101a:	bb 1f       	adc	r27, r27
    101c:	ee 1f       	adc	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	a2 17       	cp	r26, r18
    1022:	b3 07       	cpc	r27, r19
    1024:	e4 07       	cpc	r30, r20
    1026:	f5 07       	cpc	r31, r21
    1028:	20 f0       	brcs	.+8      	; 0x1032 <__udivmodsi4_ep>
    102a:	a2 1b       	sub	r26, r18
    102c:	b3 0b       	sbc	r27, r19
    102e:	e4 0b       	sbc	r30, r20
    1030:	f5 0b       	sbc	r31, r21

00001032 <__udivmodsi4_ep>:
    1032:	66 1f       	adc	r22, r22
    1034:	77 1f       	adc	r23, r23
    1036:	88 1f       	adc	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	1a 94       	dec	r1
    103c:	69 f7       	brne	.-38     	; 0x1018 <__udivmodsi4_loop>
    103e:	60 95       	com	r22
    1040:	70 95       	com	r23
    1042:	80 95       	com	r24
    1044:	90 95       	com	r25
    1046:	9b 01       	movw	r18, r22
    1048:	ac 01       	movw	r20, r24
    104a:	bd 01       	movw	r22, r26
    104c:	cf 01       	movw	r24, r30
    104e:	08 95       	ret

00001050 <memset>:
    1050:	dc 01       	movw	r26, r24
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <memset+0x6>
    1054:	6d 93       	st	X+, r22
    1056:	41 50       	subi	r20, 0x01	; 1
    1058:	50 40       	sbci	r21, 0x00	; 0
    105a:	e0 f7       	brcc	.-8      	; 0x1054 <memset+0x4>
    105c:	08 95       	ret

0000105e <_exit>:
    105e:	f8 94       	cli

00001060 <__stop_program>:
    1060:	ff cf       	rjmp	.-2      	; 0x1060 <__stop_program>
